{
    "docs": [
        {
            "location": "/", 
            "text": "TBRU microbiome data analysis page\n\n\n\n\nWhat is the Tri-I TBRU?\n\n\nThe NIH/National Institute of Allergy and Infectious Diseases \nTBRU\n program funds multi-disiplinary, collaborative, benchside-to-bedside research aimed at understanding the biology of host-pathogen interactions within the context of the clinic.\n\n\nThe Tri-I TBRU is a multi year study conducted in Haiti and New York City aimed at understanding the incrediably complex relationsips between humans and one of the most exquisitely evolved human pathogens, \nMycobacterium tuberculosis\n.\n\n\nCheck out our most recent paper!\n\n\nAntibiotic treatment for Tuberculosis induces a profound dysbiosis of the microbiome that persists long after therapy is completed\n\n\nScientific Reports 7, Article number: 10767 (2017)\n\n\ndoi: 10.1038/s41598-017-10346-6\n\n\nPut more stuff here...", 
            "title": "Home"
        }, 
        {
            "location": "/#tbru-microbiome-data-analysis-page", 
            "text": "", 
            "title": "TBRU microbiome data analysis page"
        }, 
        {
            "location": "/#what-is-the-tri-i-tbru", 
            "text": "The NIH/National Institute of Allergy and Infectious Diseases  TBRU  program funds multi-disiplinary, collaborative, benchside-to-bedside research aimed at understanding the biology of host-pathogen interactions within the context of the clinic.  The Tri-I TBRU is a multi year study conducted in Haiti and New York City aimed at understanding the incrediably complex relationsips between humans and one of the most exquisitely evolved human pathogens,  Mycobacterium tuberculosis .", 
            "title": "What is the Tri-I TBRU?"
        }, 
        {
            "location": "/#check-out-our-most-recent-paper", 
            "text": "Antibiotic treatment for Tuberculosis induces a profound dysbiosis of the microbiome that persists long after therapy is completed  Scientific Reports 7, Article number: 10767 (2017)  doi: 10.1038/s41598-017-10346-6", 
            "title": "Check out our most recent paper!"
        }, 
        {
            "location": "/#put-more-stuff-here", 
            "text": "", 
            "title": "Put more stuff here..."
        }, 
        {
            "location": "/GettingStarted/", 
            "text": "TBRU microbiome data analysis page\n\n\nGetting started\n\n\nMicrobiome data analysis seems daunting, but it is not. There are a few core set of skills that one must learn, but just like a mere 26 letters in the alphabet and a few general rules can be used to produce a masterpiece like James Joyce's Ulysses, the same is true for all next generation sequencing data analysis. The pipelines are straightforward, and once the learning curve has plateaued, they are a lot of fun! The same set of concepts can be applied to any sort of next generation data generation technique, ranging from 16S amplicon DNA sequencing, metagenomic DNA sequencing, RNAseq, metabolomics, and more! \n\n\nQiime\n\n\nDownload Qiime \nhere\n\n\nRStudio\n\n\nYou can download RStudio \nhere\n\n\nUparse pipeline\n\n\nYou can read about and download steps to process 16S amplicon data on the drive5.com \nwebpage\n. There are other methods to generate OTUs, but this is the method we use.\n\n\nAll about Phyloseq!\n\n\nPhyloseq\n is a \nBioconductor\n package that integrates all of the necessary types of data to describe a microbiome. Specifically, the sequence data, sample metadata, taxonomy information of each sequence, and a phylogenetic tree of the sequences are all easily integrated into one \"phyloseq object\". Extracting data from this object in R is simple, and it makes downstream analyses simple and reproducible.\n\n\nConda and Anaconda\n\n\nConda is a package management system that helps you find and install new packages. Read more about it \nhere\n. Conda is very easy to \ninstall\n.\n\n\nIt is also easy to install Anaconda--see \nhere\n. \n\n\nThe miniconda version of python2.7 (miniconda2/bin/python) is required for LEfSe and some other microbiome tools. Installing conda and anaconda will likely modify your $PATH to make this the default, but if not, then be aware that when running any python scripts (e.g., run_lefse.py), you'll need to point to the directory containing the miniconda version of python2.7.\n\n\nYou can find out the default python on your system by opening a terminal window and typing \"which python\".", 
            "title": "Getting Started"
        }, 
        {
            "location": "/GettingStarted/#tbru-microbiome-data-analysis-page", 
            "text": "", 
            "title": "TBRU microbiome data analysis page"
        }, 
        {
            "location": "/GettingStarted/#getting-started", 
            "text": "Microbiome data analysis seems daunting, but it is not. There are a few core set of skills that one must learn, but just like a mere 26 letters in the alphabet and a few general rules can be used to produce a masterpiece like James Joyce's Ulysses, the same is true for all next generation sequencing data analysis. The pipelines are straightforward, and once the learning curve has plateaued, they are a lot of fun! The same set of concepts can be applied to any sort of next generation data generation technique, ranging from 16S amplicon DNA sequencing, metagenomic DNA sequencing, RNAseq, metabolomics, and more!", 
            "title": "Getting started"
        }, 
        {
            "location": "/GettingStarted/#qiime", 
            "text": "Download Qiime  here", 
            "title": "Qiime"
        }, 
        {
            "location": "/GettingStarted/#rstudio", 
            "text": "You can download RStudio  here", 
            "title": "RStudio"
        }, 
        {
            "location": "/GettingStarted/#uparse-pipeline", 
            "text": "You can read about and download steps to process 16S amplicon data on the drive5.com  webpage . There are other methods to generate OTUs, but this is the method we use.", 
            "title": "Uparse pipeline"
        }, 
        {
            "location": "/GettingStarted/#all-about-phyloseq", 
            "text": "Phyloseq  is a  Bioconductor  package that integrates all of the necessary types of data to describe a microbiome. Specifically, the sequence data, sample metadata, taxonomy information of each sequence, and a phylogenetic tree of the sequences are all easily integrated into one \"phyloseq object\". Extracting data from this object in R is simple, and it makes downstream analyses simple and reproducible.", 
            "title": "All about Phyloseq!"
        }, 
        {
            "location": "/GettingStarted/#conda-and-anaconda", 
            "text": "Conda is a package management system that helps you find and install new packages. Read more about it  here . Conda is very easy to  install .  It is also easy to install Anaconda--see  here .   The miniconda version of python2.7 (miniconda2/bin/python) is required for LEfSe and some other microbiome tools. Installing conda and anaconda will likely modify your $PATH to make this the default, but if not, then be aware that when running any python scripts (e.g., run_lefse.py), you'll need to point to the directory containing the miniconda version of python2.7.  You can find out the default python on your system by opening a terminal window and typing \"which python\".", 
            "title": "Conda and Anaconda"
        }, 
        {
            "location": "/Treatment/", 
            "text": "HRZE and the gut microbiome\n\n\n\nThis tutorial is a walkthrough of the data analysis from:\n\n\nAntibiotic treatment for Tuberculosis induces a profound dysbiosis of the microbiome that persists long after therapy is completed\n\n\nScientific Reports 7, Article number: 10767 (2017)\n\n\ndoi: 10.1038/s41598-017-10346-6\n\n\nIt shows how to take microbiome data and reproduce the figures from this paper.\n\n\nPart 1: Import 16S uparse output into R\n\n\nI probably have more packages here than I are actually needed to generate the figures in this tutorial, but I have never had a problem loading all of them in this order. One exception is DESeq, which needs to be loaded \nafter\n the Phyloseq object is constructed.\n\n\nsetwd(\n~/Desktop/uparse_july/\n)\n\nrm(list=ls())\nlibrary(plyr);library(ggtree);library(phyloseq);library(ggplot2);library(scales);library(grid)\nlibrary(Hmisc);library(gridExtra);library(scales);library(stringr);library(logistf)\nlibrary(coxphf);library(reshape2);library(ifultools);library(car);library(vegan)\nlibrary(gdata);library(chron);library(data.table);library(tidyr) #imports tibble\nlibrary(ggplot2);library(yingtools2);library(gridExtra);library(lubridate);library(dplyr)\nlibrary(\npheatmap\n);library(\nRColorBrewer\n);library(\ngenefilter\n);library(ggthemes)\n\n\n\n\nGive priority to specific functions for annoying namespace reasons\n\n\nselect \n- dplyr::select\nsummarize \n- dplyr::summarize\nrownames_to_column \n- tibble::rownames_to_column\n\n\n\n\nNecessary uparse pipeline output files for downstream 16S data analysis\n\n\nThese are the four files generated from a slightly modified version of the uparse pipeline. The only truly unique file here is the tax.file (repset.fasta.blastn.refseq_rna.txt), which contains information about the top 30 BLASTn hits for each OTU in the seq.file (total.5.repset.fasta). The biom.file (total.8.otu-tax.biom) is a type of data frame where the columns correspond to people and the rows correspond to each OTU from the seq.file. Additionally, this file can hold metadata about either the rows (OTUs) or columns (the people), and in this case, the taxonomy metadata corresponding to the GreenGenes taxonomy names. Finally, the tree.file is generated from a Qiime python script called \nmake_phylogeny.py\n, which represents true evolutionary distance between these OTU sequences (i.e., the seq.file). These four files generated from uparse, qiime, and blast contain all of the information one needs to accurately analyze microbiome data and generate the types of plots in this tutorial. I make use of many commands from the yingtools2 R package, written by Ying Taur at MSKCC. \n\n\n#edit the $PATH to these files\nbiom.file \n- \n~/Desktop/uparse_july/total.8.otu-tax.biom\n\nseq.file \n- \n~/Desktop/uparse_july/total.5.repset.fasta\n\ntax.file \n- \n~/Desktop/uparse_july/total.5.repset.fasta.blastn.refseq_rna.txt\n\ntree.file \n- \n~/Desktop/uparse_july/total.10.tree\n\n\nbiom \n- import_biom(biom.file)\nseq \n- import_qiime(refseqfilename=seq.file)\ntree \n- read.tree(text=scan(tree.file,what=character(),quiet=TRUE))\n\n#make tax object with BLAST names (skip this step to assign GreenGenes names instead)\ntax \n- yingtools2::read.blastn.file(tax.file) %\n% set.tax()\n\n\n\n\nImport and setup sample data (metadata for each person in the study)\n\n\ndata.file \n- \nTBRU_Metadata_May2017.csv\n\ndata \n- read.csv(data.file,na.strings=c(\nN/A\n,\n99999\n)) %\n% mutate(sample=gsub(\n\\\\-\n,\n.\n,sample))\nsamp \n- data %\n% data.frame()\n\n#fix some name issues in the biom file to make sample_names(biom) consistent\nsample_names(biom) \n- gsub(\n..pool749\n,\n,sample_names(biom))\nsample_names(biom) \n- gsub(\n\\034\n,\n,sample_names(biom))\n\n\n\n\nMerge all data together to create the final phyloseq object\n\n\nphy \n- merge_phyloseq(biom,seq,tree)\ntax_table(phy) \n- tax\nsample_data(phy) \n- samp %\n% set.samp()\n\n\n\n\nPart 2: Subset samples and run DESeq data normalization\n\n\n#IGRA positive, only community cohort vs treatment\nphyIGRA_pos_treatment \n- subset_samples(phy,!is.na(IGRA) \n IGRA!=\nnegative\n) #can change this first variable to increase contorl sample size by including all IGRA- people, change \nnegative\n to \n\nphyIGRA_pos_treatment \n- subset_samples(phyIGRA_pos_treatment,!is.na(IGRA) \n IGRA!=\n)\nphyIGRA_pos_treatment \n- subset_samples(phyIGRA_pos_treatment,!is.na(TB_status) \n TB_status!=\ncured\n)\nphyIGRA_pos_treatment \n- subset_samples(phyIGRA_pos_treatment,!is.na(TB_status) \n TB_status!=\n)\nphyIGRA_pos_treatment \n- subset_samples(phyIGRA_pos_treatment,!is.na(Group6_TB_category) \n Group6_TB_category!=\nfamily_contact\n)\nphyIGRA_pos_treatment \n- subset_samples(phyIGRA_pos_treatment,age \n 33)\n\n\n\n\nView the Family-level distribution of taxa between the two groups\n\n\nassignCols \n- function(names,selection) {\nmymap\n-list()\navailableCols \n-c(\n#000000\n, \n#FFFF00\n, \n#1CE6FF\n, \n#FF34FF\n, \n#FF4A46\n, \n#008941\n, \n#006FA6\n, \n#A30059\n,\n\n#FFDBE5\n, \n#7A4900\n, \n#0000A6\n, \n#63FFAC\n, \n#B79762\n, \n#004D43\n, \n#8FB0FF\n, \n#997D87\n,\n\n#5A0007\n, \n#809693\n, \n#FEFFE6\n, \n#1B4400\n, \n#4FC601\n, \n#3B5DFF\n, \n#4A3B53\n, \n#FF2F80\n,\n\n#61615A\n, \n#BA0900\n, \n#6B7900\n, \n#00C2A0\n, \n#FFAA92\n, \n#FF90C9\n, \n#B903AA\n, \n#D16100\n,\n\n#DDEFFF\n, \n#000035\n, \n#7B4F4B\n, \n#A1C299\n, \n#300018\n, \n#0AA6D8\n, \n#013349\n, \n#00846F\n,\n\n#372101\n, \n#FFB500\n, \n#C2FFED\n, \n#A079BF\n, \n#CC0744\n, \n#C0B9B2\n, \n#C2FF99\n, \n#001E09\n,\n\n#00489C\n, \n#6F0062\n, \n#0CBD66\n, \n#EEC3FF\n, \n#456D75\n, \n#B77B68\n, \n#7A87A1\n, \n#788D66\n,\n\n#885578\n, \n#FAD09F\n, \n#FF8A9A\n, \n#D157A0\n, \n#BEC459\n, \n#456648\n, \n#0086ED\n, \n#886F4C\n,\n\n#34362D\n, \n#B4A8BD\n, \n#00A6AA\n, \n#452C2C\n, \n#636375\n, \n#A3C8C9\n, \n#FF913F\n, \n#938A81\n,\n\n#575329\n, \n#00FECF\n, \n#B05B6F\n, \n#8CD0FF\n, \n#3B9700\n, \n#04F757\n, \n#C8A1A1\n, \n#1E6E00\n,\n\n#7900D7\n, \n#A77500\n, \n#6367A9\n, \n#A05837\n, \n#6B002C\n, \n#772600\n, \n#D790FF\n, \n#9B9700\n,\n\n#549E79\n, \n#FFF69F\n, \n#201625\n, \n#72418F\n, \n#BC23FF\n, \n#99ADC0\n, \n#3A2465\n, \n#922329\n,\n\n#5B4534\n, \n#FDE8DC\n, \n#404E55\n, \n#0089A3\n, \n#CB7E98\n, \n#A4E804\n, \n#324E72\n, \n#6A3A4C\n,\n\n#83AB58\n, \n#001C1E\n, \n#D1F7CE\n, \n#004B28\n, \n#C8D0F6\n, \n#A3A489\n, \n#806C66\n, \n#222800\n,\n\n#BF5650\n, \n#E83000\n, \n#66796D\n, \n#DA007C\n, \n#FF1A59\n, \n#8ADBB4\n, \n#1E0200\n, \n#5B4E51\n,\n\n#C895C5\n, \n#320033\n, \n#FF6832\n, \n#66E1D3\n, \n#CFCDAC\n, \n#D0AC94\n, \n#7ED379\n, \n#012C58\n)\nmymap[[1]]\n-rev(availableCols[match(intersect(names,selection),names)])\nmymap[[2]]\n-intersect(names,selection)\nmymap\n};\n\n#function to make a tax plot faceted by whatever variable\nplot.tax \n- function(phyloseq, variable){\nt \n- get.otu.melt(phyIGRA_pos_treatment) %\n% arrange(Kingdom, Phylum, Class, Order, Family, Genus, Class) %\n%\nmutate(TB_status = factor(TB_status,levels = unique(TB_status))) %\n% group_by(sample) %\n%\narrange(TB_status) %\n% mutate(cum.pct = cumsum(pctseqs),\ny.text = (cum.pct + c(0, cum.pct[-length(cum.pct)]))/2) %\n%\nungroup() %\n% dplyr::select(-cum.pct)\ng \n- ggplot() + geom_bar(data = t, aes_string(x = \nsample\n,\ny = \npctseqs\n, fill = \nOrder\n), stat = \nidentity\n,position = \nfill\n) +\ntheme(legend.position = \nbottom\n) + facet_grid(~TB_status,scales=\nfree\n,space=\nfree\n)\ng\nreturn(g)\n}\n\nt \n- get.otu.melt(phyIGRA_pos_treatment) %\n% arrange(Kingdom, Phylum, Class, Order, Family, Genus, Class) %\n%\nmutate(TB_status = factor(TB_status,levels = unique(TB_status))) %\n% group_by(sample) %\n%\narrange(TB_status) %\n% mutate(cum.pct = cumsum(pctseqs),\ny.text = (cum.pct + c(0, cum.pct[-length(cum.pct)]))/2) %\n%\nungroup() %\n% dplyr::select(-cum.pct) %\n% as.data.frame()\n\n#show the Family level in the plot\nmycol \n- assignCols(unique(t$Family),unique(t$Family))\n\nbarplot \n- ggplot() + geom_bar(data = t, aes_string(x = \nsample\n, y = \npctseqs\n, fill = \nFamily\n),stat = \nidentity\n,position = \nfill\n) +\nfacet_grid(~TB_status,scales=\nfree\n,space=\nfree\n) +\ntheme(legend.position = \nbottom\n, axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank()) +\ntheme(legend.text = element_text(size = 14)) +\nscale_fill_manual(values = mycol[[1]],breaks=mycol[[2]])\nbarplot\n\n\n\n\n\n\nFigure 2B from paper\n\n\nLoad the DESeq2 package, make taxa names more friendly\n\n\nDownstream plotting of log2 differential abundance data from the DESeq output is made easier when the Species name and the specific OTU number are merged, since multiple OTUs can have the same name\n\n\nlibrary(\nDESeq2\n)\nphy_DESeq \n- phyIGRA_pos_treatment\n\nt \n- get.tax(phy_DESeq) %\n% mutate(PhySpec=paste(Species,otu))\ntaxa_names(phy_DESeq) \n- t$PhySpec\ntaxa_names(phy_DESeq) \n- gsub(\n \n,\n_\n,taxa_names(phy_DESeq))\ntaxa_names(phy_DESeq) \n- gsub(\n=\n,\n_\n,taxa_names(phy_DESeq))\ntaxa_names(phy_DESeq) \n- gsub(\n;\n,\n_\n,taxa_names(phy_DESeq))\n\n\n\n\nCheck the variance of OTU abundances\n\n\nThis plot tells you that most of the OTUs do not vary much from the raw sequencing data (this is a property of zero inflated data), but some have rather high variance. DESeq will attempt to normalize this variance with respect to a particular sample variable.\n\n\nhist(log10(apply(otu_table(phy_DESeq), 1, var)), xlab = \nlog10(variance)\n, main = \nA large fraction of OTUs have very low variance\n)\n\n\n\n\n\n\nConvert the phyloseq object to DESeq object, normalize with respect to TB status, and plot the results\n\n\ndig \n- phyloseq_to_deseq2(phy_DESeq, ~ TB_status) #replace this with any sample variable(s)\n\n#calculate geometric mean\ngm_mean \n- function(x, na.rm=TRUE){\nexp(sum(log(x[x \n 0]), na.rm=na.rm) / length(x))\n}\ngeoMeans \n- apply(counts(dig), 1, gm_mean)\ndig \n- estimateSizeFactors(dig, geoMeans = geoMeans)\ndig \n- estimateDispersions(dig)\ndig \n- DESeq(dig,fitType= \nlocal\n)\n\nres \n- results(dig)\n#res$pfdr \n- p.adjust(res$pvalue,method=\nfdr\n)\nres \n- res[order(res$padj, na.last=NA), ]\nalpha \n- 0.05\nsigtab \n- res[(res$padj \n alpha), ]\nsigtab \n- cbind(as(sigtab, \ndata.frame\n), as(tax_table(phy_DESeq)[rownames(sigtab), ], \nmatrix\n))\nhead(sigtab) #view the data\n\nposigtab \n- sigtab[sigtab[, \nlog2FoldChange\n] \n 1, ]\nposigtab \n- posigtab[, c(\nbaseMean\n, \nlog2FoldChange\n, \nlfcSE\n, \npadj\n, \nPhylum\n, \nClass\n, \nFamily\n, \nGenus\n)]\n\nlibrary(\nggplot2\n)\ntheme_set(theme_bw())\nsigtabgen \n- subset(sigtab, !is.na(Genus))\nsigtabgen \n- subset(sigtab, !is.na(Phylum))\n#Reorder the data to display the genus\nx \n- tapply(sigtabgen$log2FoldChange, sigtabgen$Genus, function(x) max(x))\nx \n- sort(x, TRUE)\nsigtabgen$Genus \n- factor(as.character(sigtabgen$Genus), levels=names(x))\n\nphylumcolors \n- c(\nhotpink\n,\nbrown\n,\nlightblue\n,\npurple\n)\nggplot(sigtabgen, aes(x = Genus, y = log2FoldChange, color = Phylum)) + geom_point(size = 6) +\ntheme(axis.text.x = element_text(angle = -45, hjust = 0, vjust = 1)) +\ntheme(axis.text=element_text(size=12,face=\nbold\n),legend.text=element_text(size=12))\n\n\n\n\nThis plot shows the log2 fold change between IGRA+ people and people on HRZE antibiotic treatment for Tuberculosis. Most of the OTUs fall below zero because they are depleted in people taking antibiotics. Some OTUs are increased however, potentially taking advantage of the altered ecosystem of the gut while taking antibiotics.\n\n\n\nPart 3: Analyze data with LEfSe\n\n\nLEfSe website: \nLEfSe\n\n\nCheck the $PATH in RStudio to make sure LEfSe Python scripts are there\n\n\nsystem2(\necho\n,args = \n$PATH\n)\n#RStudio should inherit the system path if it is opened at the command line with \nopen -a RStudio\n\n\n\n\n\n#acquire sample data from subsetted phyloseq object and set LEfSe parameters\nphy.lefse \n- phy_DESeq\nresults_folder \n- \n~/Desktop/uparse_july/\n\nclass \n- \nTB_status\n\nsubclass\n-FALSE\nsubject\n-\nsample\n\nanova.alpha\n-0.05 #this is the important p value\nwilcoxon.alpha\n-0.05\nlda.cutoff\n-3.0\nwilcoxon.within.subclass \n- TRUE\none.against.one \n- T\nmult.test.correction \n- 0\nmake.lefse.plots \n- FALSE\nby_otus \n- FALSE\n#\nsample.data \n- phyloseq::sample_data(phy.lefse) %\n% data.frame(stringsAsFactors = FALSE)\nsample.data$sample \n- rownames(sample.data)\n#\nkeepvars \n- c(\nsample\n,\nTB_status\n)\nkeepvars \n- unique(keepvars[!is.na(keepvars)])\nlefse.samp \n- sample.data[, keepvars]\n#\nsample0 \n- t(lefse.samp) %\n% as.matrix()\ncolnames(sample0) \n- sample0[1,]\nsample0 \n- as.data.frame(sample0)\n#\ndata0 \n- otu_table(phy.lefse) %\n% as.data.frame()\ndata1 \n- data0 %\n% as.data.table(keep.rownames=T)\nsample1 \n- sample0 %\n% as.data.table(keep.rownames=T)\ncommon \n- intersect(colnames(data1), colnames(sample1))\npre.lefse \n- rbind(sample1, data1,fill=T) %\n% t() %\n% na.omit() %\n% t()\n\n#writes table for LEfSe\nwrite.table(pre.lefse,file =paste(results_folder,\nlefse.txt\n,sep=\n),sep = \n\\t\n,row.names = FALSE,col.names = FALSE,quote = FALSE)\n\n\n\n\nopt.class \n- paste(\n-c\n, which(keepvars %in% class))\nopt.subclass \n- ifelse(is.na(subclass), \n, paste(\n-s\n, which(keepvars %in%\nsubclass)))\nopt.subject \n- ifelse(is.na(subject), \n, paste(\n-u\n, which(keepvars %in%\nsubject)))\nformat.command \n- paste(paste(\nformat_input.py \n,results_folder,\nlefse.txt \n,results_folder,\nlefse.in\n,sep=\n),\nopt.class, opt.subject, \n-o 1000000\n)\nformat.command\n#\nformat_input.py ~/Desktop/uparse_july/lefse.txt ~/Desktop/uparse_july/lefse.in -c 2 -u 1 -o 1000000\n\nsystem(format.command)\n\n\n\n\nlefse.command \n- paste(paste(\n~/miniconda2/bin/python ~/lefse/run_lefse.py \n,results_folder,\nlefse.in \n ,results_folder, \nlefse.res\n,sep=\n),\n\n-a\n, anova.alpha, \n-w\n, wilcoxon.alpha, \n-l\n, lda.cutoff,\n\n-e\n, as.numeric(wilcoxon.within.subclass), \n-y\n, as.numeric(one.against.one),\n\n-s\n, mult.test.correction)\nlefse.command\n#\n~/miniconda2/bin/python ~/lefse/run_lefse.py ~/Desktop/uparse_july/lefse.in ~/Desktop/uparse_july/lefse.res -a 0.05 -w 0.05 -l 3 -e 1 -y 1 -s 0\n\nsystem(lefse.command) #this will print out the number of significant OTUs (make sure it's not 0)\n\n\n\n\nlefse.out \n- read.table(paste(results_folder,\nlefse.res\n,sep=\n), header = FALSE, sep = \n\\t\n)\nnames(lefse.out)\n-c(\ntaxon\n,\nlog.max.pct\n,\ndirection\n,\nlda\n,\np.value\n)\n(lefse.out\n-na.omit(lefse.out))\n\n\n\n\nPalette_LTBI_treatment \n- c(\n#377eb8\n,\n#984ea3\n,\npink\n,\nblue\n) #color palette for plots\nif(length(unique(lefse.out$direction))\n3){\nlefse.out$lda[lefse.out$direction==unique(lefse.out$direction)[1]] \n-\n-1*lefse.out$lda[lefse.out$direction==unique(lefse.out$direction)[1]]\n}\nlefse.out$taxon\n-factor(lefse.out$taxon,levels=lefse.out$taxon[order(lefse.out$lda)])\ng1\n-ggplot(data=lefse.out,aes(x=taxon,y=lda,color=direction,fill=direction))+\ngeom_bar(stat=\nidentity\n)+\ncoord_flip()+\ntheme_base()\nif(length(unique(lefse.out$direction))\n3){\ng1\n-g1+scale_color_manual(values=c(Palette_LTBI_treatment))+\nscale_fill_manual(values=c(Palette_LTBI_treatment))\n}\nprint(g1)\n\n\n\n\nThe abscissa shows the linear discriminant analysis (LDA) score for each OTU\u2014a higher score means that the OTU is more important according to LEfSe to discriminate between IGRA+ and HRZE individuals:\n\n\n\nltk\n-as.character(lefse.out$taxon)\nphy_ra_ltk\n-prune_taxa(ltk,phy.lefse)\nphy_ra_ltk_m\n-psmelt(phy_ra_ltk)\n\nphy_ra_ltk_m$OTU\n-factor(phy_ra_ltk_m$OTU, levels=lefse.out$taxon[order(lefse.out$lda)])\n\ng2\n-ggplot(phy_ra_ltk_m,aes(x=OTU,\ny=Abundance,color=TB_status,\nfill=TB_status))+\ngeom_boxplot(position=position_dodge(),\ncolour=\nblack\n, # Use black outlines,\nsize=.3,alpha=0.5) +      # Thinner lines\ntheme_base()+  xlab(\n)+  coord_flip() +\nscale_y_continuous(limits = c(0,200))\nif(length(unique(lefse.out$direction))\n3){\ng2\n-g2+scale_color_manual(values=c(Palette_LTBI_treatment))+\nscale_fill_manual(values=c(Palette_LTBI_treatment))\n}\nprint(g2)\n\n\n\n\nUsing ggplot's geom_boxplot function, we can plot the most significantly differentially changed OTUs for LTBI vs HRZE people. I left the outliers in just to highlight that they are there, although we removed them for the actual paper for aesthetic purposes:\n\n\n\nFigure 2D from paper\n\n\nPart 4: Principal Coordinate Analysis\n\n\nphy_ord \n- ordinate(phyIGRA_pos_treatment, \nNMDS\n, \nbray\n)\np \n- plot_ordination(phyIGRA_pos_treatment,phy_ord, color=\nTB_status\n)\np + geom_point(size=4)\n\nPalette_LTBI_treatment \n- c(\n#377eb8\n,\n#984ea3\n) #set the color palette\n\nphy_ord \n- ordinate(phyIGRA_pos_treatment, \nNMDS\n, \nbray\n)\np \n- plot_ordination(phyIGRA_pos_treatment,phy_ord, color=\nTB_status\n)\np + geom_point(size=4) + theme(legend.text = element_text(size=15),\naxis.title.x = element_text(size=20),\naxis.title.y = element_text(size=20),\naxis.text.x = element_text(size=15),\naxis.text.y = element_text(size=15)) +\nscale_colour_manual(values=Palette_LTBI_treatment)\n\n\n\n\nThe Nonmetric Multidimensional Scaling (NMDS) output does not give traditional PCA % variance values, but is good for count data, and performs well separating people on HRZE and healthy LTBI controls:\n\n\n\nFigure 2A from paper\n\n\nPart 5: Making a heatmap\n\n\nHeatmaps are my personal favorite way of looking at this type of data. Ideally one would put much more information than just a heatmap into a single figure, but let's start with making a heatmap of just the top 40 most differentially abundant OTUs, and then perform unsupervised hierarchical clustering.\n\n\nrst \n- varianceStabilizingTransformation(dig, blind=FALSE,fitType = \nparametric\n)\nsampleDists \n- dist( t( assay(rst) ) )\nsampleDists\ntopVarGenes \n- head(order(rowVars(assay(rst)),decreasing=TRUE),40)\nmat \n- assay(rst)[ topVarGenes, ]\nmat \n- mat - rowMeans(mat)\nrst$days_ON_HRZE \n- as.numeric(rst$days_ON_HRZE)\ndf \n- as.data.frame(colData(rst)[,c(\nTB_status\n,\ndays_ON_HRZE\n,\nage\n,\nsex\n)]) #\ndays_ON_HRZE\n,\nTB_status\n\npheatmap(mat, annotation_col=df,clustering_distance_rows = \ncorrelation\n,\nclustering_method = \nward.D2\n,show_colnames = F)\n\n\n\n\n\n\nFigure 2C from paper\n\n\nPart 6: Making a phylogenetic tree + heatmap\n\n\nPeople always ask me about individuals on treatment (HRZE) and what effect(s) there are on the Actinobacteria in the microbitoa. Interestingly, the major effects are in the Firmicutes, and as a Phylum, the Actinobacteria are largely untouched, with the exception of a species of Bifidobacterium. The plot below takes the phylogenetic tree of Actinobacteria (generated from make_phylogeny.py) and maps the relative abundance of each OTU on the tree in a heatmap.\n\n\np_actino \n- subset_samples(phy,!is.na(IGRA) \n IGRA!=\n)\np.species \n- subset_taxa(p_actino, Phylum==\nActinobacteria\n)\n\ntr \n- phy_tree(p.species)\nspec \n- as.data.frame(get.tax(p.species))\ngt \n- ggtree(tr, branch.length = \ny\n) %\n+% spec\ngd \n- gt$data\n\ntt \n- get.otu.melt(p.species,filter.zero=FALSE)%\n%left_join(select(gd,otu=label,x,y),by=\notu\n) %\n%\narrange(TB_status) %\n% mutate(sample2=factor(sample,levels=unique(sample)),\ncol=as.numeric(sample2),x.col=scales::rescale(col,to=c(1.3,2)))\n\ntt$TB_status\n-factor(tt$TB_status,levels=c(\ncured\n,\ntreatment\n,\nhealthy\n))\nPalette_actino \n- c(\n#e7298a\n,\n#984ea3\n,\n#377eb8\n)\n\n\ng1 \n- gt + geom_tippoint(data=gd$istip,aes(color=Genus),size=3) +\ngeom_text(data=gd$istip,aes(label=Genus,x=x+0.001),hjust=-0.1,check_overlap = F) +\ngeom_tile(data=tt,aes(x=x.col,y=y,fill=TB_status,alpha=pctseqs),position=\ndodge\n) +\nscale_alpha_continuous(trans=log_epsilon_trans(0.00001),aes(show.legend=Relative_Abundance)) +\ntheme(legend.position=\nright\n)\ng1 + scale_fill_manual(values=Palette_actino)\n\n\n\n\n\n\nSupplementry Figure from paper", 
            "title": "Treatment"
        }, 
        {
            "location": "/Treatment/#hrze-and-the-gut-microbiome", 
            "text": "This tutorial is a walkthrough of the data analysis from:  Antibiotic treatment for Tuberculosis induces a profound dysbiosis of the microbiome that persists long after therapy is completed  Scientific Reports 7, Article number: 10767 (2017)  doi: 10.1038/s41598-017-10346-6  It shows how to take microbiome data and reproduce the figures from this paper.", 
            "title": "HRZE and the gut microbiome"
        }, 
        {
            "location": "/Treatment/#part-1-import-16s-uparse-output-into-r", 
            "text": "I probably have more packages here than I are actually needed to generate the figures in this tutorial, but I have never had a problem loading all of them in this order. One exception is DESeq, which needs to be loaded  after  the Phyloseq object is constructed.  setwd( ~/Desktop/uparse_july/ )\n\nrm(list=ls())\nlibrary(plyr);library(ggtree);library(phyloseq);library(ggplot2);library(scales);library(grid)\nlibrary(Hmisc);library(gridExtra);library(scales);library(stringr);library(logistf)\nlibrary(coxphf);library(reshape2);library(ifultools);library(car);library(vegan)\nlibrary(gdata);library(chron);library(data.table);library(tidyr) #imports tibble\nlibrary(ggplot2);library(yingtools2);library(gridExtra);library(lubridate);library(dplyr)\nlibrary( pheatmap );library( RColorBrewer );library( genefilter );library(ggthemes)", 
            "title": "Part 1: Import 16S uparse output into R"
        }, 
        {
            "location": "/Treatment/#give-priority-to-specific-functions-for-annoying-namespace-reasons", 
            "text": "select  - dplyr::select\nsummarize  - dplyr::summarize\nrownames_to_column  - tibble::rownames_to_column", 
            "title": "Give priority to specific functions for annoying namespace reasons"
        }, 
        {
            "location": "/Treatment/#necessary-uparse-pipeline-output-files-for-downstream-16s-data-analysis", 
            "text": "These are the four files generated from a slightly modified version of the uparse pipeline. The only truly unique file here is the tax.file (repset.fasta.blastn.refseq_rna.txt), which contains information about the top 30 BLASTn hits for each OTU in the seq.file (total.5.repset.fasta). The biom.file (total.8.otu-tax.biom) is a type of data frame where the columns correspond to people and the rows correspond to each OTU from the seq.file. Additionally, this file can hold metadata about either the rows (OTUs) or columns (the people), and in this case, the taxonomy metadata corresponding to the GreenGenes taxonomy names. Finally, the tree.file is generated from a Qiime python script called  make_phylogeny.py , which represents true evolutionary distance between these OTU sequences (i.e., the seq.file). These four files generated from uparse, qiime, and blast contain all of the information one needs to accurately analyze microbiome data and generate the types of plots in this tutorial. I make use of many commands from the yingtools2 R package, written by Ying Taur at MSKCC.   #edit the $PATH to these files\nbiom.file  -  ~/Desktop/uparse_july/total.8.otu-tax.biom \nseq.file  -  ~/Desktop/uparse_july/total.5.repset.fasta \ntax.file  -  ~/Desktop/uparse_july/total.5.repset.fasta.blastn.refseq_rna.txt \ntree.file  -  ~/Desktop/uparse_july/total.10.tree \n\nbiom  - import_biom(biom.file)\nseq  - import_qiime(refseqfilename=seq.file)\ntree  - read.tree(text=scan(tree.file,what=character(),quiet=TRUE))\n\n#make tax object with BLAST names (skip this step to assign GreenGenes names instead)\ntax  - yingtools2::read.blastn.file(tax.file) % % set.tax()", 
            "title": "Necessary uparse pipeline output files for downstream 16S data analysis"
        }, 
        {
            "location": "/Treatment/#import-and-setup-sample-data-metadata-for-each-person-in-the-study", 
            "text": "data.file  -  TBRU_Metadata_May2017.csv \ndata  - read.csv(data.file,na.strings=c( N/A , 99999 )) % % mutate(sample=gsub( \\\\- , . ,sample))\nsamp  - data % % data.frame()\n\n#fix some name issues in the biom file to make sample_names(biom) consistent\nsample_names(biom)  - gsub( ..pool749 , ,sample_names(biom))\nsample_names(biom)  - gsub( \\034 , ,sample_names(biom))", 
            "title": "Import and setup sample data (metadata for each person in the study)"
        }, 
        {
            "location": "/Treatment/#merge-all-data-together-to-create-the-final-phyloseq-object", 
            "text": "phy  - merge_phyloseq(biom,seq,tree)\ntax_table(phy)  - tax\nsample_data(phy)  - samp % % set.samp()", 
            "title": "Merge all data together to create the final phyloseq object"
        }, 
        {
            "location": "/Treatment/#part-2-subset-samples-and-run-deseq-data-normalization", 
            "text": "#IGRA positive, only community cohort vs treatment\nphyIGRA_pos_treatment  - subset_samples(phy,!is.na(IGRA)   IGRA!= negative ) #can change this first variable to increase contorl sample size by including all IGRA- people, change  negative  to  \nphyIGRA_pos_treatment  - subset_samples(phyIGRA_pos_treatment,!is.na(IGRA)   IGRA!= )\nphyIGRA_pos_treatment  - subset_samples(phyIGRA_pos_treatment,!is.na(TB_status)   TB_status!= cured )\nphyIGRA_pos_treatment  - subset_samples(phyIGRA_pos_treatment,!is.na(TB_status)   TB_status!= )\nphyIGRA_pos_treatment  - subset_samples(phyIGRA_pos_treatment,!is.na(Group6_TB_category)   Group6_TB_category!= family_contact )\nphyIGRA_pos_treatment  - subset_samples(phyIGRA_pos_treatment,age   33)", 
            "title": "Part 2: Subset samples and run DESeq data normalization"
        }, 
        {
            "location": "/Treatment/#view-the-family-level-distribution-of-taxa-between-the-two-groups", 
            "text": "assignCols  - function(names,selection) {\nmymap -list()\navailableCols  -c( #000000 ,  #FFFF00 ,  #1CE6FF ,  #FF34FF ,  #FF4A46 ,  #008941 ,  #006FA6 ,  #A30059 , #FFDBE5 ,  #7A4900 ,  #0000A6 ,  #63FFAC ,  #B79762 ,  #004D43 ,  #8FB0FF ,  #997D87 , #5A0007 ,  #809693 ,  #FEFFE6 ,  #1B4400 ,  #4FC601 ,  #3B5DFF ,  #4A3B53 ,  #FF2F80 , #61615A ,  #BA0900 ,  #6B7900 ,  #00C2A0 ,  #FFAA92 ,  #FF90C9 ,  #B903AA ,  #D16100 , #DDEFFF ,  #000035 ,  #7B4F4B ,  #A1C299 ,  #300018 ,  #0AA6D8 ,  #013349 ,  #00846F , #372101 ,  #FFB500 ,  #C2FFED ,  #A079BF ,  #CC0744 ,  #C0B9B2 ,  #C2FF99 ,  #001E09 , #00489C ,  #6F0062 ,  #0CBD66 ,  #EEC3FF ,  #456D75 ,  #B77B68 ,  #7A87A1 ,  #788D66 , #885578 ,  #FAD09F ,  #FF8A9A ,  #D157A0 ,  #BEC459 ,  #456648 ,  #0086ED ,  #886F4C , #34362D ,  #B4A8BD ,  #00A6AA ,  #452C2C ,  #636375 ,  #A3C8C9 ,  #FF913F ,  #938A81 , #575329 ,  #00FECF ,  #B05B6F ,  #8CD0FF ,  #3B9700 ,  #04F757 ,  #C8A1A1 ,  #1E6E00 , #7900D7 ,  #A77500 ,  #6367A9 ,  #A05837 ,  #6B002C ,  #772600 ,  #D790FF ,  #9B9700 , #549E79 ,  #FFF69F ,  #201625 ,  #72418F ,  #BC23FF ,  #99ADC0 ,  #3A2465 ,  #922329 , #5B4534 ,  #FDE8DC ,  #404E55 ,  #0089A3 ,  #CB7E98 ,  #A4E804 ,  #324E72 ,  #6A3A4C , #83AB58 ,  #001C1E ,  #D1F7CE ,  #004B28 ,  #C8D0F6 ,  #A3A489 ,  #806C66 ,  #222800 , #BF5650 ,  #E83000 ,  #66796D ,  #DA007C ,  #FF1A59 ,  #8ADBB4 ,  #1E0200 ,  #5B4E51 , #C895C5 ,  #320033 ,  #FF6832 ,  #66E1D3 ,  #CFCDAC ,  #D0AC94 ,  #7ED379 ,  #012C58 )\nmymap[[1]] -rev(availableCols[match(intersect(names,selection),names)])\nmymap[[2]] -intersect(names,selection)\nmymap\n};\n\n#function to make a tax plot faceted by whatever variable\nplot.tax  - function(phyloseq, variable){\nt  - get.otu.melt(phyIGRA_pos_treatment) % % arrange(Kingdom, Phylum, Class, Order, Family, Genus, Class) % %\nmutate(TB_status = factor(TB_status,levels = unique(TB_status))) % % group_by(sample) % %\narrange(TB_status) % % mutate(cum.pct = cumsum(pctseqs),\ny.text = (cum.pct + c(0, cum.pct[-length(cum.pct)]))/2) % %\nungroup() % % dplyr::select(-cum.pct)\ng  - ggplot() + geom_bar(data = t, aes_string(x =  sample ,\ny =  pctseqs , fill =  Order ), stat =  identity ,position =  fill ) +\ntheme(legend.position =  bottom ) + facet_grid(~TB_status,scales= free ,space= free )\ng\nreturn(g)\n}\n\nt  - get.otu.melt(phyIGRA_pos_treatment) % % arrange(Kingdom, Phylum, Class, Order, Family, Genus, Class) % %\nmutate(TB_status = factor(TB_status,levels = unique(TB_status))) % % group_by(sample) % %\narrange(TB_status) % % mutate(cum.pct = cumsum(pctseqs),\ny.text = (cum.pct + c(0, cum.pct[-length(cum.pct)]))/2) % %\nungroup() % % dplyr::select(-cum.pct) % % as.data.frame()\n\n#show the Family level in the plot\nmycol  - assignCols(unique(t$Family),unique(t$Family))\n\nbarplot  - ggplot() + geom_bar(data = t, aes_string(x =  sample , y =  pctseqs , fill =  Family ),stat =  identity ,position =  fill ) +\nfacet_grid(~TB_status,scales= free ,space= free ) +\ntheme(legend.position =  bottom , axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank()) +\ntheme(legend.text = element_text(size = 14)) +\nscale_fill_manual(values = mycol[[1]],breaks=mycol[[2]])\nbarplot   Figure 2B from paper", 
            "title": "View the Family-level distribution of taxa between the two groups"
        }, 
        {
            "location": "/Treatment/#load-the-deseq2-package-make-taxa-names-more-friendly", 
            "text": "Downstream plotting of log2 differential abundance data from the DESeq output is made easier when the Species name and the specific OTU number are merged, since multiple OTUs can have the same name  library( DESeq2 )\nphy_DESeq  - phyIGRA_pos_treatment\n\nt  - get.tax(phy_DESeq) % % mutate(PhySpec=paste(Species,otu))\ntaxa_names(phy_DESeq)  - t$PhySpec\ntaxa_names(phy_DESeq)  - gsub(   , _ ,taxa_names(phy_DESeq))\ntaxa_names(phy_DESeq)  - gsub( = , _ ,taxa_names(phy_DESeq))\ntaxa_names(phy_DESeq)  - gsub( ; , _ ,taxa_names(phy_DESeq))", 
            "title": "Load the DESeq2 package, make taxa names more friendly"
        }, 
        {
            "location": "/Treatment/#check-the-variance-of-otu-abundances", 
            "text": "This plot tells you that most of the OTUs do not vary much from the raw sequencing data (this is a property of zero inflated data), but some have rather high variance. DESeq will attempt to normalize this variance with respect to a particular sample variable.  hist(log10(apply(otu_table(phy_DESeq), 1, var)), xlab =  log10(variance) , main =  A large fraction of OTUs have very low variance )", 
            "title": "Check the variance of OTU abundances"
        }, 
        {
            "location": "/Treatment/#convert-the-phyloseq-object-to-deseq-object-normalize-with-respect-to-tb-status-and-plot-the-results", 
            "text": "dig  - phyloseq_to_deseq2(phy_DESeq, ~ TB_status) #replace this with any sample variable(s)\n\n#calculate geometric mean\ngm_mean  - function(x, na.rm=TRUE){\nexp(sum(log(x[x   0]), na.rm=na.rm) / length(x))\n}\ngeoMeans  - apply(counts(dig), 1, gm_mean)\ndig  - estimateSizeFactors(dig, geoMeans = geoMeans)\ndig  - estimateDispersions(dig)\ndig  - DESeq(dig,fitType=  local )\n\nres  - results(dig)\n#res$pfdr  - p.adjust(res$pvalue,method= fdr )\nres  - res[order(res$padj, na.last=NA), ]\nalpha  - 0.05\nsigtab  - res[(res$padj   alpha), ]\nsigtab  - cbind(as(sigtab,  data.frame ), as(tax_table(phy_DESeq)[rownames(sigtab), ],  matrix ))\nhead(sigtab) #view the data\n\nposigtab  - sigtab[sigtab[,  log2FoldChange ]   1, ]\nposigtab  - posigtab[, c( baseMean ,  log2FoldChange ,  lfcSE ,  padj ,  Phylum ,  Class ,  Family ,  Genus )]\n\nlibrary( ggplot2 )\ntheme_set(theme_bw())\nsigtabgen  - subset(sigtab, !is.na(Genus))\nsigtabgen  - subset(sigtab, !is.na(Phylum))\n#Reorder the data to display the genus\nx  - tapply(sigtabgen$log2FoldChange, sigtabgen$Genus, function(x) max(x))\nx  - sort(x, TRUE)\nsigtabgen$Genus  - factor(as.character(sigtabgen$Genus), levels=names(x))\n\nphylumcolors  - c( hotpink , brown , lightblue , purple )\nggplot(sigtabgen, aes(x = Genus, y = log2FoldChange, color = Phylum)) + geom_point(size = 6) +\ntheme(axis.text.x = element_text(angle = -45, hjust = 0, vjust = 1)) +\ntheme(axis.text=element_text(size=12,face= bold ),legend.text=element_text(size=12))  This plot shows the log2 fold change between IGRA+ people and people on HRZE antibiotic treatment for Tuberculosis. Most of the OTUs fall below zero because they are depleted in people taking antibiotics. Some OTUs are increased however, potentially taking advantage of the altered ecosystem of the gut while taking antibiotics.", 
            "title": "Convert the phyloseq object to DESeq object, normalize with respect to TB status, and plot the results"
        }, 
        {
            "location": "/Treatment/#part-3-analyze-data-with-lefse", 
            "text": "", 
            "title": "Part 3: Analyze data with LEfSe"
        }, 
        {
            "location": "/Treatment/#lefse-website-lefse", 
            "text": "", 
            "title": "LEfSe website: LEfSe"
        }, 
        {
            "location": "/Treatment/#check-the-path-in-rstudio-to-make-sure-lefse-python-scripts-are-there", 
            "text": "system2( echo ,args =  $PATH )\n#RStudio should inherit the system path if it is opened at the command line with  open -a RStudio   #acquire sample data from subsetted phyloseq object and set LEfSe parameters\nphy.lefse  - phy_DESeq\nresults_folder  -  ~/Desktop/uparse_july/ \nclass  -  TB_status \nsubclass -FALSE\nsubject - sample \nanova.alpha -0.05 #this is the important p value\nwilcoxon.alpha -0.05\nlda.cutoff -3.0\nwilcoxon.within.subclass  - TRUE\none.against.one  - T\nmult.test.correction  - 0\nmake.lefse.plots  - FALSE\nby_otus  - FALSE\n#\nsample.data  - phyloseq::sample_data(phy.lefse) % % data.frame(stringsAsFactors = FALSE)\nsample.data$sample  - rownames(sample.data)\n#\nkeepvars  - c( sample , TB_status )\nkeepvars  - unique(keepvars[!is.na(keepvars)])\nlefse.samp  - sample.data[, keepvars]\n#\nsample0  - t(lefse.samp) % % as.matrix()\ncolnames(sample0)  - sample0[1,]\nsample0  - as.data.frame(sample0)\n#\ndata0  - otu_table(phy.lefse) % % as.data.frame()\ndata1  - data0 % % as.data.table(keep.rownames=T)\nsample1  - sample0 % % as.data.table(keep.rownames=T)\ncommon  - intersect(colnames(data1), colnames(sample1))\npre.lefse  - rbind(sample1, data1,fill=T) % % t() % % na.omit() % % t()\n\n#writes table for LEfSe\nwrite.table(pre.lefse,file =paste(results_folder, lefse.txt ,sep= ),sep =  \\t ,row.names = FALSE,col.names = FALSE,quote = FALSE)  opt.class  - paste( -c , which(keepvars %in% class))\nopt.subclass  - ifelse(is.na(subclass),  , paste( -s , which(keepvars %in%\nsubclass)))\nopt.subject  - ifelse(is.na(subject),  , paste( -u , which(keepvars %in%\nsubject)))\nformat.command  - paste(paste( format_input.py  ,results_folder, lefse.txt  ,results_folder, lefse.in ,sep= ),\nopt.class, opt.subject,  -o 1000000 )\nformat.command\n# format_input.py ~/Desktop/uparse_july/lefse.txt ~/Desktop/uparse_july/lefse.in -c 2 -u 1 -o 1000000 \nsystem(format.command)  lefse.command  - paste(paste( ~/miniconda2/bin/python ~/lefse/run_lefse.py  ,results_folder, lefse.in   ,results_folder,  lefse.res ,sep= ), -a , anova.alpha,  -w , wilcoxon.alpha,  -l , lda.cutoff, -e , as.numeric(wilcoxon.within.subclass),  -y , as.numeric(one.against.one), -s , mult.test.correction)\nlefse.command\n# ~/miniconda2/bin/python ~/lefse/run_lefse.py ~/Desktop/uparse_july/lefse.in ~/Desktop/uparse_july/lefse.res -a 0.05 -w 0.05 -l 3 -e 1 -y 1 -s 0 \nsystem(lefse.command) #this will print out the number of significant OTUs (make sure it's not 0)  lefse.out  - read.table(paste(results_folder, lefse.res ,sep= ), header = FALSE, sep =  \\t )\nnames(lefse.out) -c( taxon , log.max.pct , direction , lda , p.value )\n(lefse.out -na.omit(lefse.out))  Palette_LTBI_treatment  - c( #377eb8 , #984ea3 , pink , blue ) #color palette for plots\nif(length(unique(lefse.out$direction)) 3){\nlefse.out$lda[lefse.out$direction==unique(lefse.out$direction)[1]]  -\n-1*lefse.out$lda[lefse.out$direction==unique(lefse.out$direction)[1]]\n}\nlefse.out$taxon -factor(lefse.out$taxon,levels=lefse.out$taxon[order(lefse.out$lda)])\ng1 -ggplot(data=lefse.out,aes(x=taxon,y=lda,color=direction,fill=direction))+\ngeom_bar(stat= identity )+\ncoord_flip()+\ntheme_base()\nif(length(unique(lefse.out$direction)) 3){\ng1 -g1+scale_color_manual(values=c(Palette_LTBI_treatment))+\nscale_fill_manual(values=c(Palette_LTBI_treatment))\n}\nprint(g1)  The abscissa shows the linear discriminant analysis (LDA) score for each OTU\u2014a higher score means that the OTU is more important according to LEfSe to discriminate between IGRA+ and HRZE individuals:  ltk -as.character(lefse.out$taxon)\nphy_ra_ltk -prune_taxa(ltk,phy.lefse)\nphy_ra_ltk_m -psmelt(phy_ra_ltk)\n\nphy_ra_ltk_m$OTU -factor(phy_ra_ltk_m$OTU, levels=lefse.out$taxon[order(lefse.out$lda)])\n\ng2 -ggplot(phy_ra_ltk_m,aes(x=OTU,\ny=Abundance,color=TB_status,\nfill=TB_status))+\ngeom_boxplot(position=position_dodge(),\ncolour= black , # Use black outlines,\nsize=.3,alpha=0.5) +      # Thinner lines\ntheme_base()+  xlab( )+  coord_flip() +\nscale_y_continuous(limits = c(0,200))\nif(length(unique(lefse.out$direction)) 3){\ng2 -g2+scale_color_manual(values=c(Palette_LTBI_treatment))+\nscale_fill_manual(values=c(Palette_LTBI_treatment))\n}\nprint(g2)  Using ggplot's geom_boxplot function, we can plot the most significantly differentially changed OTUs for LTBI vs HRZE people. I left the outliers in just to highlight that they are there, although we removed them for the actual paper for aesthetic purposes:  Figure 2D from paper", 
            "title": "Check the $PATH in RStudio to make sure LEfSe Python scripts are there"
        }, 
        {
            "location": "/Treatment/#part-4-principal-coordinate-analysis", 
            "text": "phy_ord  - ordinate(phyIGRA_pos_treatment,  NMDS ,  bray )\np  - plot_ordination(phyIGRA_pos_treatment,phy_ord, color= TB_status )\np + geom_point(size=4)\n\nPalette_LTBI_treatment  - c( #377eb8 , #984ea3 ) #set the color palette\n\nphy_ord  - ordinate(phyIGRA_pos_treatment,  NMDS ,  bray )\np  - plot_ordination(phyIGRA_pos_treatment,phy_ord, color= TB_status )\np + geom_point(size=4) + theme(legend.text = element_text(size=15),\naxis.title.x = element_text(size=20),\naxis.title.y = element_text(size=20),\naxis.text.x = element_text(size=15),\naxis.text.y = element_text(size=15)) +\nscale_colour_manual(values=Palette_LTBI_treatment)  The Nonmetric Multidimensional Scaling (NMDS) output does not give traditional PCA % variance values, but is good for count data, and performs well separating people on HRZE and healthy LTBI controls:  Figure 2A from paper", 
            "title": "Part 4: Principal Coordinate Analysis"
        }, 
        {
            "location": "/Treatment/#part-5-making-a-heatmap", 
            "text": "Heatmaps are my personal favorite way of looking at this type of data. Ideally one would put much more information than just a heatmap into a single figure, but let's start with making a heatmap of just the top 40 most differentially abundant OTUs, and then perform unsupervised hierarchical clustering.  rst  - varianceStabilizingTransformation(dig, blind=FALSE,fitType =  parametric )\nsampleDists  - dist( t( assay(rst) ) )\nsampleDists\ntopVarGenes  - head(order(rowVars(assay(rst)),decreasing=TRUE),40)\nmat  - assay(rst)[ topVarGenes, ]\nmat  - mat - rowMeans(mat)\nrst$days_ON_HRZE  - as.numeric(rst$days_ON_HRZE)\ndf  - as.data.frame(colData(rst)[,c( TB_status , days_ON_HRZE , age , sex )]) # days_ON_HRZE , TB_status \npheatmap(mat, annotation_col=df,clustering_distance_rows =  correlation ,\nclustering_method =  ward.D2 ,show_colnames = F)   Figure 2C from paper", 
            "title": "Part 5: Making a heatmap"
        }, 
        {
            "location": "/Treatment/#part-6-making-a-phylogenetic-tree-heatmap", 
            "text": "People always ask me about individuals on treatment (HRZE) and what effect(s) there are on the Actinobacteria in the microbitoa. Interestingly, the major effects are in the Firmicutes, and as a Phylum, the Actinobacteria are largely untouched, with the exception of a species of Bifidobacterium. The plot below takes the phylogenetic tree of Actinobacteria (generated from make_phylogeny.py) and maps the relative abundance of each OTU on the tree in a heatmap.  p_actino  - subset_samples(phy,!is.na(IGRA)   IGRA!= )\np.species  - subset_taxa(p_actino, Phylum== Actinobacteria )\n\ntr  - phy_tree(p.species)\nspec  - as.data.frame(get.tax(p.species))\ngt  - ggtree(tr, branch.length =  y ) % +% spec\ngd  - gt$data\n\ntt  - get.otu.melt(p.species,filter.zero=FALSE)% %left_join(select(gd,otu=label,x,y),by= otu ) % %\narrange(TB_status) % % mutate(sample2=factor(sample,levels=unique(sample)),\ncol=as.numeric(sample2),x.col=scales::rescale(col,to=c(1.3,2)))\n\ntt$TB_status -factor(tt$TB_status,levels=c( cured , treatment , healthy ))\nPalette_actino  - c( #e7298a , #984ea3 , #377eb8 )\n\n\ng1  - gt + geom_tippoint(data=gd$istip,aes(color=Genus),size=3) +\ngeom_text(data=gd$istip,aes(label=Genus,x=x+0.001),hjust=-0.1,check_overlap = F) +\ngeom_tile(data=tt,aes(x=x.col,y=y,fill=TB_status,alpha=pctseqs),position= dodge ) +\nscale_alpha_continuous(trans=log_epsilon_trans(0.00001),aes(show.legend=Relative_Abundance)) +\ntheme(legend.position= right )\ng1 + scale_fill_manual(values=Palette_actino)   Supplementry Figure from paper", 
            "title": "Part 6: Making a phylogenetic tree + heatmap"
        }, 
        {
            "location": "/Cured/", 
            "text": "HRZE causes dysbiosis\n\n\nThis tutorial is a walkthrough of the data analysis from:\n\n\nAntibiotic treatment for Tuberculosis induces a profound dysbiosis of the microbiome that persists long after therapy is completed\n\n\nScientific Reports 7, Article number: 10767 (2017)\n\n\ndoi: 10.1038/s41598-017-10346-6\n\n\nIt shows how to take microbiome data and reproduce the figures from this paper.\n\n\nJump right to subsetting...\n\n\nSee the previous section (Treatment) for how to generate the Phyloseq object\n\n\n#IGRA positive vs cured (IGRA+ vs cured)\nphy_pos_cured \n- subset_samples(phy,!is.na(IGRA) \n IGRA!=\nnegative\n)\nphy_pos_cured \n- subset_samples(phy_pos_cured,!is.na(IGRA) \n IGRA!=\n)\nphy_pos_cured \n- subset_samples(phy_pos_cured,!is.na(TB_status) \n TB_status!=\ntreatment\n)\nphy_pos_cured \n- subset_samples(phy_pos_cured,!is.na(Group6_TB_category) \n Group6_TB_category!=\nfamily_contact\n)\nphy_pos_cured \n- subset_samples(phy_pos_cured,!is.na(Group6_TB_category) \n Group6_TB_category!=\ntreatment\n)\nphy_pos_cured \n- subset_samples(phy_pos_cured, age \n 30)\n\n\n\n\n#Variance of OTU abundances\nhist(log10(apply(otu_table(phy_pos_cured), 1, var)), xlab = \nlog10(variance)\n, main = \nVariance distribution for LTBI/Cured\n)\n\n\n\n\n\n\nDESeq normalization\n\n\nlibrary(\nDESeq2\n)\nphy_DESeq \n- phy_pos_cured\n\nt \n- get.tax(phy_DESeq) %\n% mutate(PhySpec=paste(Species,otu))\ntaxa_names(phy_DESeq) \n- t$PhySpec\ntaxa_names(phy_DESeq) \n- gsub(\n \n,\n_\n,taxa_names(phy_DESeq))\ntaxa_names(phy_DESeq) \n- gsub(\n=\n,\n_\n,taxa_names(phy_DESeq))\ntaxa_names(phy_DESeq) \n- gsub(\n;\n,\n_\n,taxa_names(phy_DESeq))\n\ndig \n- phyloseq_to_deseq2(phy_DESeq, ~ TB_status) #replace this with any sample variable(s)\n\n#calculate geometric mean\ngm_mean \n- function(x, na.rm=TRUE){\nexp(sum(log(x[x \n 0]), na.rm=na.rm) / length(x))\n}\ngeoMeans \n- apply(counts(dig), 1, gm_mean)\ndig \n- estimateSizeFactors(dig, geoMeans = geoMeans)\ndig \n- estimateDispersions(dig)\ndig \n- DESeq(dig,fitType= \nlocal\n)\n\nres \n- results(dig)\n#res$pfdr \n- p.adjust(res$pvalue,method=\nfdr\n)\nres \n- res[order(res$padj, na.last=NA), ]\nalpha \n- 0.05\nsigtab \n- res[(res$padj \n alpha), ]\nsigtab \n- cbind(as(sigtab, \ndata.frame\n), as(tax_table(phy_DESeq)[rownames(sigtab), ], \nmatrix\n))\nhead(sigtab) #view the data\n\nposigtab \n- sigtab[sigtab[, \nlog2FoldChange\n] \n 1, ]\nposigtab \n- posigtab[, c(\nbaseMean\n, \nlog2FoldChange\n, \nlfcSE\n, \npadj\n, \nPhylum\n, \nClass\n, \nFamily\n, \nGenus\n)]\n\n\n\n\nDESeq normalization plots\n\n\nlibrary(\nggplot2\n)\ntheme_set(theme_bw())\nsigtabgen \n- subset(sigtab, !is.na(Genus))\nsigtabgen \n- subset(sigtab, !is.na(Phylum))\n# Phylum order\nx \n- tapply(sigtabgen$log2FoldChange, sigtabgen$Phylum, function(x) max(x))\nx \n- sort(x, TRUE)\nsigtabgen$Phylum = factor(as.character(sigtabgen$Phylum), levels=names(x))\n# Genus order\nx \n- tapply(sigtabgen$log2FoldChange, sigtabgen$Genus, function(x) max(x))\nx \n- sort(x, TRUE)\nsigtabgen$Genus \n- factor(as.character(sigtabgen$Genus), levels=names(x))\n\nphylumcolors \n- c(\nhotpink\n,\nbrown\n,\nlightblue\n,\npurple\n)\nggplot(sigtabgen, aes(x = Genus, y = log2FoldChange, color = Phylum)) + geom_point(size = 6) +\ntheme(axis.text.x = element_text(angle = -45, hjust = 0, vjust = 1)) +\ntheme(axis.text=element_text(size=12,face=\nbold\n),legend.text=element_text(size=12))\n\n\n\n\nRun LEfSE for LTBI vs Cured\n\n\nphy.lefse \n- phy_DESeq\nresults_folder \n- \n~/Desktop/uparse_july/\n\nclass \n- \nTB_status\n\nsubclass\n-FALSE\nsubject\n-\nsample\n\nanova.alpha\n-0.05 \nwilcoxon.alpha\n-0.05\nlda.cutoff\n-2.5\nwilcoxon.within.subclass \n- TRUE\none.against.one \n- T\nmult.test.correction \n- 0\nmake.lefse.plots \n- FALSE\nby_otus \n- FALSE\n#\nsample.data \n- phyloseq::sample_data(phy.lefse) %\n% data.frame(stringsAsFactors = FALSE)\nsample.data$sample \n- rownames(sample.data)\n#\nkeepvars \n- c(\nsample\n,\nTB_status\n)\nkeepvars \n- unique(keepvars[!is.na(keepvars)])\nlefse.samp \n- sample.data[, keepvars]\n#\nsample0 \n- t(lefse.samp) %\n% as.matrix()\ncolnames(sample0) \n- sample0[1,]\nsample0 \n- as.data.frame(sample0)\n#\ndata0 \n- otu_table(phy.lefse) %\n% as.data.frame()\ndata1 \n- data0 %\n% as.data.table(keep.rownames=T)\nsample1 \n- sample0 %\n% as.data.table(keep.rownames=T)\ncommon \n- intersect(colnames(data1), colnames(sample1))\npre.lefse \n- rbind(sample1, data1,fill=T) %\n% t() %\n% na.omit() %\n% t()\n\n#writes table for LEfSe\nwrite.table(pre.lefse,file =paste(results_folder,\nlefse.txt\n,sep=\n),sep = \n\\t\n,row.names = FALSE,col.names = FALSE,quote = FALSE)\nopt.class \n- paste(\n-c\n, which(keepvars %in% class))\nopt.subclass \n- ifelse(is.na(subclass), \n, paste(\n-s\n, which(keepvars %in%\nsubclass)))\nopt.subject \n- ifelse(is.na(subject), \n, paste(\n-u\n, which(keepvars %in%\nsubject)))\nformat.command \n- paste(paste(\nformat_input.py \n,results_folder,\nlefse.txt \n,results_folder,\nlefse.in\n,sep=\n),\nopt.class, opt.subject, \n-o 1000000\n)\nformat.command\n#\nformat_input.py ~/Desktop/uparse_july/lefse.txt ~/Desktop/uparse_july/lefse.in -c 2 -u 1 -o 1000000\n\nsystem(format.command)\nlefse.command \n- paste(paste(\n~/miniconda2/bin/python ~/lefse/run_lefse.py \n,results_folder,\nlefse.in \n ,results_folder, \nlefse.res\n,sep=\n),\n\n-a\n, anova.alpha, \n-w\n, wilcoxon.alpha, \n-l\n, lda.cutoff,\n\n-e\n, as.numeric(wilcoxon.within.subclass), \n-y\n, as.numeric(one.against.one),\n\n-s\n, mult.test.correction)\nlefse.command\n#\n~/miniconda2/bin/python ~/lefse/run_lefse.py ~/Desktop/uparse_july/lefse.in ~/Desktop/uparse_july/lefse.res -a 0.05 -w 0.05 -l 3 -e 1 -y 1 -s 0\n\nsystem(lefse.command) #this will print out the number of significant OTUs (make sure it's not 0)\nlefse.out \n- read.table(paste(results_folder,\nlefse.res\n,sep=\n), header = FALSE, sep = \n\\t\n)\nnames(lefse.out)\n-c(\ntaxon\n,\nlog.max.pct\n,\ndirection\n,\nlda\n,\np.value\n)\n(lefse.out\n-na.omit(lefse.out))\nPalette_LTBI_cured \n- c(\n#e7298a\n,\n#377eb8\n)\nif(length(unique(lefse.out$direction))\n3){\nlefse.out$lda[lefse.out$direction==unique(lefse.out$direction)[1]] \n-\n-1*lefse.out$lda[lefse.out$direction==unique(lefse.out$direction)[1]]\n}\nlefse.out$taxon\n-factor(lefse.out$taxon,levels=lefse.out$taxon[order(lefse.out$lda)])\ng1\n-ggplot(data=lefse.out,aes(x=taxon,y=lda,color=direction,fill=direction))+\ngeom_bar(stat=\nidentity\n)+\ncoord_flip()+\ntheme_base()\nif(length(unique(lefse.out$direction))\n3){\ng1\n-g1+scale_color_manual(values=c(Palette_LTBI_cured))+\nscale_fill_manual(values=c(Palette_LTBI_cured))\n}\nprint(g1)\n\n\n\n\n\n\nltk\n-as.character(lefse.out$taxon)\nphy_ra_ltk\n-prune_taxa(ltk,phy.lefse)\nphy_ra_ltk_m\n-psmelt(phy_ra_ltk)\n\nphy_ra_ltk_m$OTU\n-factor(phy_ra_ltk_m$OTU, levels=lefse.out$taxon[order(lefse.out$lda)])\n\ng2\n-ggplot(phy_ra_ltk_m,aes(x=Genus,\ny=Abundance,color=TB_status,\nfill=TB_status))+\ngeom_boxplot(position=position_dodge(),\ncolour=\nblack\n, # Use black outlines,\nsize=.3,alpha=0.5) +      # Thinner lines\ntheme_base()+  xlab(\n)+  coord_flip() +\nscale_y_continuous(limits = c(0,300))\nif(length(unique(lefse.out$direction))\n3){\ng2\n-g2+scale_color_manual(values=c(Palette_LTBI_cured))+\nscale_fill_manual(values=c(Palette_LTBI_cured))\n}\nprint(g2)\n\n\n\n\n\n\nFigure 4D from paper", 
            "title": "Cured"
        }, 
        {
            "location": "/Cured/#hrze-causes-dysbiosis", 
            "text": "This tutorial is a walkthrough of the data analysis from:  Antibiotic treatment for Tuberculosis induces a profound dysbiosis of the microbiome that persists long after therapy is completed  Scientific Reports 7, Article number: 10767 (2017)  doi: 10.1038/s41598-017-10346-6  It shows how to take microbiome data and reproduce the figures from this paper.", 
            "title": "HRZE causes dysbiosis"
        }, 
        {
            "location": "/Cured/#jump-right-to-subsetting", 
            "text": "See the previous section (Treatment) for how to generate the Phyloseq object  #IGRA positive vs cured (IGRA+ vs cured)\nphy_pos_cured  - subset_samples(phy,!is.na(IGRA)   IGRA!= negative )\nphy_pos_cured  - subset_samples(phy_pos_cured,!is.na(IGRA)   IGRA!= )\nphy_pos_cured  - subset_samples(phy_pos_cured,!is.na(TB_status)   TB_status!= treatment )\nphy_pos_cured  - subset_samples(phy_pos_cured,!is.na(Group6_TB_category)   Group6_TB_category!= family_contact )\nphy_pos_cured  - subset_samples(phy_pos_cured,!is.na(Group6_TB_category)   Group6_TB_category!= treatment )\nphy_pos_cured  - subset_samples(phy_pos_cured, age   30)  #Variance of OTU abundances\nhist(log10(apply(otu_table(phy_pos_cured), 1, var)), xlab =  log10(variance) , main =  Variance distribution for LTBI/Cured )", 
            "title": "Jump right to subsetting..."
        }, 
        {
            "location": "/Cured/#deseq-normalization", 
            "text": "library( DESeq2 )\nphy_DESeq  - phy_pos_cured\n\nt  - get.tax(phy_DESeq) % % mutate(PhySpec=paste(Species,otu))\ntaxa_names(phy_DESeq)  - t$PhySpec\ntaxa_names(phy_DESeq)  - gsub(   , _ ,taxa_names(phy_DESeq))\ntaxa_names(phy_DESeq)  - gsub( = , _ ,taxa_names(phy_DESeq))\ntaxa_names(phy_DESeq)  - gsub( ; , _ ,taxa_names(phy_DESeq))\n\ndig  - phyloseq_to_deseq2(phy_DESeq, ~ TB_status) #replace this with any sample variable(s)\n\n#calculate geometric mean\ngm_mean  - function(x, na.rm=TRUE){\nexp(sum(log(x[x   0]), na.rm=na.rm) / length(x))\n}\ngeoMeans  - apply(counts(dig), 1, gm_mean)\ndig  - estimateSizeFactors(dig, geoMeans = geoMeans)\ndig  - estimateDispersions(dig)\ndig  - DESeq(dig,fitType=  local )\n\nres  - results(dig)\n#res$pfdr  - p.adjust(res$pvalue,method= fdr )\nres  - res[order(res$padj, na.last=NA), ]\nalpha  - 0.05\nsigtab  - res[(res$padj   alpha), ]\nsigtab  - cbind(as(sigtab,  data.frame ), as(tax_table(phy_DESeq)[rownames(sigtab), ],  matrix ))\nhead(sigtab) #view the data\n\nposigtab  - sigtab[sigtab[,  log2FoldChange ]   1, ]\nposigtab  - posigtab[, c( baseMean ,  log2FoldChange ,  lfcSE ,  padj ,  Phylum ,  Class ,  Family ,  Genus )]", 
            "title": "DESeq normalization"
        }, 
        {
            "location": "/Cured/#deseq-normalization-plots", 
            "text": "library( ggplot2 )\ntheme_set(theme_bw())\nsigtabgen  - subset(sigtab, !is.na(Genus))\nsigtabgen  - subset(sigtab, !is.na(Phylum))\n# Phylum order\nx  - tapply(sigtabgen$log2FoldChange, sigtabgen$Phylum, function(x) max(x))\nx  - sort(x, TRUE)\nsigtabgen$Phylum = factor(as.character(sigtabgen$Phylum), levels=names(x))\n# Genus order\nx  - tapply(sigtabgen$log2FoldChange, sigtabgen$Genus, function(x) max(x))\nx  - sort(x, TRUE)\nsigtabgen$Genus  - factor(as.character(sigtabgen$Genus), levels=names(x))\n\nphylumcolors  - c( hotpink , brown , lightblue , purple )\nggplot(sigtabgen, aes(x = Genus, y = log2FoldChange, color = Phylum)) + geom_point(size = 6) +\ntheme(axis.text.x = element_text(angle = -45, hjust = 0, vjust = 1)) +\ntheme(axis.text=element_text(size=12,face= bold ),legend.text=element_text(size=12))", 
            "title": "DESeq normalization plots"
        }, 
        {
            "location": "/Cured/#run-lefse-for-ltbi-vs-cured", 
            "text": "phy.lefse  - phy_DESeq\nresults_folder  -  ~/Desktop/uparse_july/ \nclass  -  TB_status \nsubclass -FALSE\nsubject - sample \nanova.alpha -0.05 \nwilcoxon.alpha -0.05\nlda.cutoff -2.5\nwilcoxon.within.subclass  - TRUE\none.against.one  - T\nmult.test.correction  - 0\nmake.lefse.plots  - FALSE\nby_otus  - FALSE\n#\nsample.data  - phyloseq::sample_data(phy.lefse) % % data.frame(stringsAsFactors = FALSE)\nsample.data$sample  - rownames(sample.data)\n#\nkeepvars  - c( sample , TB_status )\nkeepvars  - unique(keepvars[!is.na(keepvars)])\nlefse.samp  - sample.data[, keepvars]\n#\nsample0  - t(lefse.samp) % % as.matrix()\ncolnames(sample0)  - sample0[1,]\nsample0  - as.data.frame(sample0)\n#\ndata0  - otu_table(phy.lefse) % % as.data.frame()\ndata1  - data0 % % as.data.table(keep.rownames=T)\nsample1  - sample0 % % as.data.table(keep.rownames=T)\ncommon  - intersect(colnames(data1), colnames(sample1))\npre.lefse  - rbind(sample1, data1,fill=T) % % t() % % na.omit() % % t()\n\n#writes table for LEfSe\nwrite.table(pre.lefse,file =paste(results_folder, lefse.txt ,sep= ),sep =  \\t ,row.names = FALSE,col.names = FALSE,quote = FALSE)\nopt.class  - paste( -c , which(keepvars %in% class))\nopt.subclass  - ifelse(is.na(subclass),  , paste( -s , which(keepvars %in%\nsubclass)))\nopt.subject  - ifelse(is.na(subject),  , paste( -u , which(keepvars %in%\nsubject)))\nformat.command  - paste(paste( format_input.py  ,results_folder, lefse.txt  ,results_folder, lefse.in ,sep= ),\nopt.class, opt.subject,  -o 1000000 )\nformat.command\n# format_input.py ~/Desktop/uparse_july/lefse.txt ~/Desktop/uparse_july/lefse.in -c 2 -u 1 -o 1000000 \nsystem(format.command)\nlefse.command  - paste(paste( ~/miniconda2/bin/python ~/lefse/run_lefse.py  ,results_folder, lefse.in   ,results_folder,  lefse.res ,sep= ), -a , anova.alpha,  -w , wilcoxon.alpha,  -l , lda.cutoff, -e , as.numeric(wilcoxon.within.subclass),  -y , as.numeric(one.against.one), -s , mult.test.correction)\nlefse.command\n# ~/miniconda2/bin/python ~/lefse/run_lefse.py ~/Desktop/uparse_july/lefse.in ~/Desktop/uparse_july/lefse.res -a 0.05 -w 0.05 -l 3 -e 1 -y 1 -s 0 \nsystem(lefse.command) #this will print out the number of significant OTUs (make sure it's not 0)\nlefse.out  - read.table(paste(results_folder, lefse.res ,sep= ), header = FALSE, sep =  \\t )\nnames(lefse.out) -c( taxon , log.max.pct , direction , lda , p.value )\n(lefse.out -na.omit(lefse.out))\nPalette_LTBI_cured  - c( #e7298a , #377eb8 )\nif(length(unique(lefse.out$direction)) 3){\nlefse.out$lda[lefse.out$direction==unique(lefse.out$direction)[1]]  -\n-1*lefse.out$lda[lefse.out$direction==unique(lefse.out$direction)[1]]\n}\nlefse.out$taxon -factor(lefse.out$taxon,levels=lefse.out$taxon[order(lefse.out$lda)])\ng1 -ggplot(data=lefse.out,aes(x=taxon,y=lda,color=direction,fill=direction))+\ngeom_bar(stat= identity )+\ncoord_flip()+\ntheme_base()\nif(length(unique(lefse.out$direction)) 3){\ng1 -g1+scale_color_manual(values=c(Palette_LTBI_cured))+\nscale_fill_manual(values=c(Palette_LTBI_cured))\n}\nprint(g1)   ltk -as.character(lefse.out$taxon)\nphy_ra_ltk -prune_taxa(ltk,phy.lefse)\nphy_ra_ltk_m -psmelt(phy_ra_ltk)\n\nphy_ra_ltk_m$OTU -factor(phy_ra_ltk_m$OTU, levels=lefse.out$taxon[order(lefse.out$lda)])\n\ng2 -ggplot(phy_ra_ltk_m,aes(x=Genus,\ny=Abundance,color=TB_status,\nfill=TB_status))+\ngeom_boxplot(position=position_dodge(),\ncolour= black , # Use black outlines,\nsize=.3,alpha=0.5) +      # Thinner lines\ntheme_base()+  xlab( )+  coord_flip() +\nscale_y_continuous(limits = c(0,300))\nif(length(unique(lefse.out$direction)) 3){\ng2 -g2+scale_color_manual(values=c(Palette_LTBI_cured))+\nscale_fill_manual(values=c(Palette_LTBI_cured))\n}\nprint(g2)   Figure 4D from paper", 
            "title": "Run LEfSE for LTBI vs Cured"
        }, 
        {
            "location": "/IGRA/", 
            "text": "IGRA status and microbiome composition\n\n\nAdonis test\n\n\nThere are seemingly innumerable ways to query for differences in microbial community composition. Given the zero-inflated type of microbiome data, non-parametric analyses are most appropriate to ask if a statistical difference exists between two groups. In the case of IGRA status, we concluded that LTBI (being IGRA+) has no detectable effect on intestinal microbiome composition. What we formally did was a non-parametric multivariate ANOVA on the microbiome features between IGRA- and IGRA+ people.\n\n\nThe following analysis compares 46 IGRA- and 55 IGRA+ people (data in the phy_NoTB_LTBI Phyloseq object). The\n\n\n# Calculate bray curtis distance matrix\nbray \n- phyloseq::distance(phy_NoTB_LTBI, method = \nbray\n)\n\n# make a data frame from the sample_data\nsampledf \n- data.frame(sample_data(phy_NoTB_LTBI))\n\n# Adonis test\nlibrary(vegan)\nadonis(bray ~ IGRA + age + sex, data = sampledf) \n\n\n\n\n\n\n\n\n\n\n\n\nDf\n\n\nSumsOfSqs\n\n\nMeanSqs\n\n\nF.Model\n\n\nR2\n\n\nPr(\nF)\n\n\n\n\n\n\n\n\n\n\nIGRA\n\n\n1\n\n\n0.353\n\n\n0.35288\n\n\n1.0630\n\n\n0.01054\n\n\n0.319\n\n\n\n\n\n\nage\n\n\n1\n\n\n0.532\n\n\n0.53233\n\n\n1.6036\n\n\n0.01590\n\n\n0.044 *\n\n\n\n\n\n\nsex\n\n\n1\n\n\n0.386\n\n\n0.38622\n\n\n1.1635\n\n\n0.01154\n\n\n0.225\n\n\n\n\n\n\nResiduals\n\n\n97\n\n\n32.201\n\n\n0.33196\n\n\n-\n\n\n0.96201\n\n\n\n\n\n\n\n\nTotal\n\n\n100\n\n\n33.472\n\n\n-\n\n\n-\n\n\n1.00000\n\n\n\n\n\n\n\n\n\n\nSignif. codes:  0 \u2018\n\u2019 0.001 \u2018\n\u2019 0.01 \u2018\n\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1\n\n\nWe can see that if anything, age is the major factor that contributes to variation between IGRA- and IGRA+ individuals. In fact, age has been described as a major contributer to microbiome variation (for a variety of reasons), thus, we made sure to control for age in our study.\n\n\nbeta \n- betadisper(treat_bray, sampledf$IGRA)\npermutest(beta)\n\n\n\n\n\n\n\n\n\n\n\n\nDf\n\n\nSum Sq\n\n\nMean Sq\n\n\nF\n\n\nN.Perm\n\n\nPr(\nF)\n\n\n\n\n\n\n\n\n\n\nGroups\n\n\n1\n\n\n0.02456\n\n\n0.0245641\n\n\n3.8261\n\n\n999\n\n\n0.05 *\n\n\n\n\n\n\nResiduals\n\n\n99\n\n\n0.63560\n\n\n0.0064202", 
            "title": "IGRA status"
        }, 
        {
            "location": "/IGRA/#igra-status-and-microbiome-composition", 
            "text": "", 
            "title": "IGRA status and microbiome composition"
        }, 
        {
            "location": "/IGRA/#adonis-test", 
            "text": "There are seemingly innumerable ways to query for differences in microbial community composition. Given the zero-inflated type of microbiome data, non-parametric analyses are most appropriate to ask if a statistical difference exists between two groups. In the case of IGRA status, we concluded that LTBI (being IGRA+) has no detectable effect on intestinal microbiome composition. What we formally did was a non-parametric multivariate ANOVA on the microbiome features between IGRA- and IGRA+ people.  The following analysis compares 46 IGRA- and 55 IGRA+ people (data in the phy_NoTB_LTBI Phyloseq object). The  # Calculate bray curtis distance matrix\nbray  - phyloseq::distance(phy_NoTB_LTBI, method =  bray )\n\n# make a data frame from the sample_data\nsampledf  - data.frame(sample_data(phy_NoTB_LTBI))\n\n# Adonis test\nlibrary(vegan)\nadonis(bray ~ IGRA + age + sex, data = sampledf)       Df  SumsOfSqs  MeanSqs  F.Model  R2  Pr( F)      IGRA  1  0.353  0.35288  1.0630  0.01054  0.319    age  1  0.532  0.53233  1.6036  0.01590  0.044 *    sex  1  0.386  0.38622  1.1635  0.01154  0.225    Residuals  97  32.201  0.33196  -  0.96201     Total  100  33.472  -  -  1.00000      Signif. codes:  0 \u2018 \u2019 0.001 \u2018 \u2019 0.01 \u2018 \u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1  We can see that if anything, age is the major factor that contributes to variation between IGRA- and IGRA+ individuals. In fact, age has been described as a major contributer to microbiome variation (for a variety of reasons), thus, we made sure to control for age in our study.  beta  - betadisper(treat_bray, sampledf$IGRA)\npermutest(beta)      Df  Sum Sq  Mean Sq  F  N.Perm  Pr( F)      Groups  1  0.02456  0.0245641  3.8261  999  0.05 *    Residuals  99  0.63560  0.0064202", 
            "title": "Adonis test"
        }, 
        {
            "location": "/Treatment_metagenomics/", 
            "text": "Loading the data\n\n\nrm (list = ls())\nlibrary(phyloseq);library(ggplot2);library(gridExtra);library(RColorBrewer);library(colorspace)\nlibrary(lattice);library(plyr);library(KEGGREST);library(pracma);library(ggthemes);library(pheatmap)\nlibrary(ComplexHeatmap);library(BiocParallel);library(genefilter);library(DESeq2);library(tidyr)\nlibrary(viridis);library(ggstance);library(data.table);library(pracma);library(RbioRXN);library(ggplot2)\n\nsetwd(\n~/Desktop/metagenomics/TBRU_treatment/\n)\n\nregister(MulticoreParam(30))\nasinTransform \n- function(p) { asin(sqrt(p)) }\n\nmainDir \n- \n../metagenomics/\n\nsubDir \n- \nmetaphlan_profiling_treatment\n\ndir.create(file.path(mainDir, subDir), showWarnings = TRUE,  recursive = TRUE)\nresults_folder \n- paste(mainDir,subDir,sep=\n)\n\n\n\n\nmtph_subDir \n- \nmetaphlan_profiling/\n\ndir.create(file.path(mainDir, mtph_subDir), showWarnings = TRUE,  recursive = TRUE)\nmtph_results_folder \n- paste(mainDir,mtph_subDir,sep=\n)\nmtph_dat \n- read.csv(\nmetaphlan2_taxonomic_table_joined.tsv\n,sep=\n\\t\n)\nmtph \n-mtph_dat\nrownames(mtph) \n-mtph$X.SampleID\nmtph$X.SampleID\n-NULL\nmtph_otudata \n-otu_table(mtph,taxa_are_rows = TRUE)\nmtph_taxmat \n- matrix(sample(letters, nrow(mtph_otudata)/10, replace = TRUE), nrow = nrow(mtph_otudata), ncol = 7)\nrownames(mtph_taxmat) \n- rownames(mtph_otudata)\ncolnames(mtph_taxmat) \n- c(\nDomain\n, \nPhylum\n, \nClass\n, \nOrder\n, \nFamily\n, \nGenus\n, \nSpecies\n)\nmtph_taxmat \n-tax_table(mtph_taxmat)\nmtph_phy \n- phyloseq(mtph_otudata, mtph_taxmat)\n\n\n\n\nImport the metaphlan data to phyloseq\n\n\nmetadata.file \n- \nTBRU_Metadata_May2017.csv\n\nmetadata \n- read.csv(metadata.file,na.strings=c(\nN/A\n,\n99999\n))\nmetadata[is.na(metadata)]\n-\n99999\n\nmetadata$sample\n-gsub(\n-\n,\n.\n,metadata$sample)\nsamp \n- metadata %\n% data.frame()\nrownames(samp)\n-metadata$sample\nsnames\n-as.data.frame(do.call('rbind',strsplit(sample_names(mtph_phy),\n_\n)))[,1]\nsample_names(mtph_phy)\n-snames\nsample_data(mtph_phy)\n-samp\n\n# subsettings\nmtph_phyIGRA_pos_active \n- subset_samples(mtph_phy,!is.na(IGRA) \n IGRA!=\n)\nmtph_phyIGRA_pos_active \n- subset_samples(mtph_phyIGRA_pos_active,!is.na(Group6_TB_category) \n Group6_TB_category!=\ncured\n)\nmtph_phyIGRA_pos_active \n- subset_samples(mtph_phyIGRA_pos_active,!is.na(Group6_TB_category) \n Group6_TB_category!=\nfamily_contact\n)\nmtph_phyIGRA_pos_active \n- subset_samples(mtph_phyIGRA_pos_active,!is.na(Group6_TB_category) \n Group6_TB_category!=\nfamily_LTBI\n)\n\n# keep only \n38 years old in age\nmtph_phyIGRA_pos_active \n- subset_samples(mtph_phyIGRA_pos_active,age\n=38)\n\nsplitted_names_tbru\n-strsplit(taxa_names(mtph_phyIGRA_pos_active),\n\\\\|\n)\nsplitted_names_tbru_length\n-lengths(splitted_names_tbru)\ntaxa_names(mtph_phyIGRA_pos_active)[splitted_names_tbru_length==7]\nmtph_phyIGRA_pos_active.speclevel\n-prune_taxa(taxa_names(mtph_phyIGRA_pos_active)[splitted_names_tbru_length==7],mtph_phyIGRA_pos_active)\ntaxa_names(mtph_phyIGRA_pos_active.speclevel)\n-do.call('rbind',strsplit(taxa_names(mtph_phyIGRA_pos_active.speclevel),\n\\\\|\n))[,7]\n\n\n\n\nPrinciple corrdinate analysis\n\n\npdf(paste(mtph_results_folder,'pca_plot_treatment.pdf',sep=\n/\n),height = 7, width = 10)\nmtph_GP.ord \n- ordinate(mtph_phyIGRA_pos_active.speclevel, \nNMDS\n, \nbray\n)\nPalette_LTBI_treatment \n- c(\n#377eb8\n,\n#984ea3\n)\nmtph.p.pca \n- plot_ordination(mtph_phyIGRA_pos_active.speclevel, mtph_GP.ord, type=\nsamples\n,\ncolor=\nTB_status\n)\nmtph.p.pca \n- mtph.p.pca + geom_point(size=4) +\ntheme_base() + scale_color_manual(values=c(Palette_LTBI_treatment))\nprint(mtph.p.pca)\ndev.off()\n\n\n\n\n\n\nassignCols \n- function(names,selection) {\nmymap\n-list()\navailableCols \n-c(\n#000000\n, \n#FFFF00\n, \n#1CE6FF\n, \n#FF34FF\n, \n#FF4A46\n, \n#008941\n, \n#006FA6\n, \n#A30059\n,\n\n#FFDBE5\n, \n#7A4900\n, \n#0000A6\n, \n#63FFAC\n, \n#B79762\n, \n#004D43\n, \n#8FB0FF\n, \n#997D87\n,\n\n#5A0007\n, \n#809693\n, \n#FEFFE6\n, \n#1B4400\n, \n#4FC601\n, \n#3B5DFF\n, \n#4A3B53\n, \n#FF2F80\n,\n\n#61615A\n, \n#BA0900\n, \n#6B7900\n, \n#00C2A0\n, \n#FFAA92\n, \n#FF90C9\n, \n#B903AA\n, \n#D16100\n,\n\n#DDEFFF\n, \n#000035\n, \n#7B4F4B\n, \n#A1C299\n, \n#300018\n, \n#0AA6D8\n, \n#013349\n, \n#00846F\n,\n\n#372101\n, \n#FFB500\n, \n#C2FFED\n, \n#A079BF\n, \n#CC0744\n, \n#C0B9B2\n, \n#C2FF99\n, \n#001E09\n,\n\n#00489C\n, \n#6F0062\n, \n#0CBD66\n, \n#EEC3FF\n, \n#456D75\n, \n#B77B68\n, \n#7A87A1\n, \n#788D66\n,\n\n#885578\n, \n#FAD09F\n, \n#FF8A9A\n, \n#D157A0\n, \n#BEC459\n, \n#456648\n, \n#0086ED\n, \n#886F4C\n,\n\n#34362D\n, \n#B4A8BD\n, \n#00A6AA\n, \n#452C2C\n, \n#636375\n, \n#A3C8C9\n, \n#FF913F\n, \n#938A81\n,\n\n#575329\n, \n#00FECF\n, \n#B05B6F\n, \n#8CD0FF\n, \n#3B9700\n, \n#04F757\n, \n#C8A1A1\n, \n#1E6E00\n,\n\n#7900D7\n, \n#A77500\n, \n#6367A9\n, \n#A05837\n, \n#6B002C\n, \n#772600\n, \n#D790FF\n, \n#9B9700\n,\n\n#549E79\n, \n#FFF69F\n, \n#201625\n, \n#72418F\n, \n#BC23FF\n, \n#99ADC0\n, \n#3A2465\n, \n#922329\n,\n\n#5B4534\n, \n#FDE8DC\n, \n#404E55\n, \n#0089A3\n, \n#CB7E98\n, \n#A4E804\n, \n#324E72\n, \n#6A3A4C\n,\n\n#83AB58\n, \n#001C1E\n, \n#D1F7CE\n, \n#004B28\n, \n#C8D0F6\n, \n#A3A489\n, \n#806C66\n, \n#222800\n,\n\n#BF5650\n, \n#E83000\n, \n#66796D\n, \n#DA007C\n, \n#FF1A59\n, \n#8ADBB4\n, \n#1E0200\n, \n#5B4E51\n,\n\n#C895C5\n, \n#320033\n, \n#FF6832\n, \n#66E1D3\n, \n#CFCDAC\n, \n#D0AC94\n, \n#7ED379\n, \n#012C58\n)\nmymap[[1]]\n-rev(availableCols[match(intersect(names,selection),names)])\nmymap[[2]]\n-intersect(names,selection)\nmymap\n};\nmost_abundant_number \n-40\ntopN =  most_abundant_number\nmost_abundant_taxa = sort(taxa_sums(mtph_phyIGRA_pos_active.speclevel), TRUE)[1:topN]\nGP = prune_taxa(names(most_abundant_taxa), mtph_phyIGRA_pos_active.speclevel)\nmGPr \n- psmelt(GP)\nmycol \n- assignCols(unique(mGPr$OTU),unique(mGPr$OTU))\npdf(paste(results_folder,'barplot_all.pdf',sep=\n/\n),height = 6, width = 14)\np.bar\n-ggplot(data=mGPr,aes(Patient.ID, Abundance, fill=OTU))+\ngeom_bar(stat = \nidentity\n) +\ntheme_base()+\ntheme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +\nscale_fill_manual(values = mycol[[1]],breaks=mycol[[2]]) +\nfacet_wrap(~TB_status, scales=\nfree\n)+\nxlab(\n)\nprint(p.bar)\ndev.off()\n\n\n\n\n\n\nRun LEfSe on Treatment vs LTBI\n\n\nsystem(\necho $PATH\n)\n\n# # #aquire sample data from phy\nphy.lefse\n-mtph_phyIGRA_pos_active.speclevel\nclass \n- \nTB_status\n\nsubclass\n-FALSE\nsubject\n-\nsample\n\nanova.alpha\n-0.05\nwilcoxon.alpha\n-0.05\nlda.cutoff\n-2.0\nwilcoxon.within.subclass \n- TRUE\none.against.one \n- T\nmult.test.correction \n- 0\nmake.lefse.plots \n- FALSE\nby_otus \n- FALSE\n#\nsample.data \n- sample_data(phy.lefse) %\n% data.frame(stringsAsFactors = FALSE)\nrownames(sample.data) \n- sample.data$sample\n#\nkeepvars \n- c(\nsample\n,\nTB_status\n)\nkeepvars \n- unique(keepvars[!is.na(keepvars)])\nlefse.samp \n- sample.data[, keepvars]\n#\nsample0 \n- t(lefse.samp) %\n% as.matrix()\ncolnames(sample0) \n- sample0[1,]\nsample0 \n- as.data.frame(sample0)\n#\ndata0 \n- otu_table(phy.lefse) %\n% as.data.frame()\ndata1 \n- data0 %\n% as.data.table(keep.rownames=T)\nsample1 \n- sample0 %\n% as.data.table(keep.rownames=T)\ncommon \n- intersect(colnames(data1), colnames(sample1))\npre.lefse \n- rbind(sample1, data1,fill=T) %\n% t() %\n% na.omit() %\n% t()\n#\nwrite.table(pre.lefse,file = paste(results_folder,\nlefse.txt\n,sep=\n),sep = \n\\t\n,row.names = FALSE,col.names = FALSE,quote = FALSE)\n#\nopt.class \n- paste(\n-c\n, which(keepvars %in% class))\nopt.subclass \n- ifelse(is.na(subclass), \n, paste(\n-s\n, which(keepvars %in%\nsubclass)))\nopt.subject \n- ifelse(is.na(subject), \n, paste(\n-u\n, which(keepvars %in%\nsubject)))\nformat.command \n- paste(paste(\nformat_input.py \n,results_folder,\nlefse.txt \n,results_folder,\nlefse.in\n,sep=\n),\nopt.class, opt.subject, \n-o 1000000\n)\nsystem(format.command)\n#\nlefse.command \n- paste(paste(\n~/miniconda2/bin/python ~/lefse/run_lefse.py \n,results_folder,\nlefse.in \n ,results_folder, \nlefse.res\n,sep=\n),\n\n-a\n, anova.alpha, \n-w\n, wilcoxon.alpha, \n-l\n, lda.cutoff,\n\n-e\n, as.numeric(wilcoxon.within.subclass), \n-y\n, as.numeric(one.against.one),\n\n-s\n, mult.test.correction)\nlefse.command\nsystem(lefse.command)\n\nlefse.out \n- read.table(paste(results_folder,\nlefse.res\n,sep=\n), header = FALSE, sep = \n\\t\n)\nnames(lefse.out)\n-c(\ntaxon\n,\nlog.max.pct\n,\ndirection\n,\nlda\n,\np.value\n)\n(lefse.out\n-na.omit(lefse.out))\n\npdf(paste(results_folder,'lda_plot_LEFSE.pdf',sep=\n),height = 7, width = 10)\nif(length(unique(lefse.out$direction))\n3){\nlefse.out$lda[lefse.out$direction==unique(lefse.out$direction)[1]] \n-\n-1*lefse.out$lda[lefse.out$direction==unique(lefse.out$direction)[1]]\n}\nlefse.out$taxon\n-factor(lefse.out$taxon,levels=lefse.out$taxon[order(lefse.out$lda)])\ng1\n-ggplot(data=lefse.out,aes(x=taxon,y=lda,color=direction,fill=direction))+\ngeom_bar(stat=\nidentity\n)+\ncoord_flip()+\ntheme_base()\nif(length(unique(lefse.out$direction))\n3){\ng1\n-g1+scale_color_manual(values=c(Palette_LTBI_treatment))+\nscale_fill_manual(values=c(Palette_LTBI_treatment))\n}\nprint(g1)\ndev.off()\nprint(g1)\n\n\n\n\n\n\nltk\n-as.character(lefse.out$taxon)\nphy_ra_ltk\n-prune_taxa(ltk,phy.lefse)\nphy_ra_ltk_m\n-psmelt(phy_ra_ltk)\n\nphy_ra_ltk_m$OTU\n-factor(phy_ra_ltk_m$OTU, levels=lefse.out$taxon[order(lefse.out$lda)])\n\ng2\n-ggplot(phy_ra_ltk_m,aes(x=OTU,\ny=Abundance,color=TB_status,\nfill=TB_status))+\ngeom_boxplot(position=position_dodge(),\ncolour=\nblack\n, # Use black outlines,\nsize=.3,alpha=0.5,outlier.shape = NA) +      # Thinner lines\ntheme_base()+\nxlab(\n)+\ncoord_flip()+\nscale_y_continuous(limits = c(0,5))\nif(length(unique(lefse.out$direction))\n3){\ng2\n-g2+scale_color_manual(values=c(Palette_LTBI_treatment))+\nscale_fill_manual(values=c(Palette_LTBI_treatment))\n}\nprint(g2)\npdf(paste(results_folder,'significant_LEFSE.cured.pdf',sep=\n),height = 6, width = 10)\nprint(g2)\ndev.off()\n\n\n\n\n\n\nMake a heatmap with the LEfSe results\n\n\nphy_pos_cured_no_treat_ra_sset_sign\n-mtph_phy_ra_ltk\nsig_data_c\n-otu_table(phy_pos_cured_no_treat_ra_sset_sign)\ngenotype_colors\n-rep(\ndarkred\n,length(sample_data(phy_pos_cured_no_treat_ra_sset_sign)$TB_status))\ngenotype_colors[which(sample_data(phy_pos_cured_no_treat_ra_sset_sign)$TB_status==\nhealthy\n)]\n-\ndarkblue\n\ndist.pear\n-function(x) as.dist(1-cor(t(x)))\nmat\n-as.matrix(as.data.frame(sig_data_c))\nmat2\n-scale(t(mat), scale = TRUE, center = TRUE)\nmat2\n-t(mat2)\nmat2[mat2==0]\n-NA\nannotations\n-data.frame(sample_data(phy_pos_cured_no_treat_ra_sset_sign)[,c(\nTB_status\n)])\nnames(annotations)\n-c(\nTB_status\n)\ncolor_col = list(TB_status = c(\ntreatment\n =  \n#984ea3\n,\nhealthy\n = \n#377eb8\n))\nha_column = HeatmapAnnotation(annotations,col = color_col)\npdf(paste(results_folder,'in_house_heatmap_pathway_significant_abundance_complex_2.pdf',sep=\n),height = 7, width = 10)\nht1 \n- Heatmap(mat2, name = \nht1\n, column_title = \nLTBI vs Cured\n, top_annotation = ha_column,\nclustering_distance_columns = \nminkowski\n,\nclustering_method_columns = \nward.D\n,row_names_side = \nleft\n,\nkm=1, color_space = \nLAB\n,col=magma(11), row_dend_side=\nright\n,\nshow_column_names = \nFALSE\n, width=4, row_names_max_width = unit(8, \ncm\n),\nrow_names_gp = gpar(fontsize = 9), cluster_columns = T,\nna_col=\nwhite\n,heatmap_legend_param = list(at = c(0,5),color_bar = \ncontinuous\n))\nht_list = ht1\npadding = unit.c(unit(2, \nmm\n), grobWidth(textGrob(\njnbkjsddjdjd_annotation_name\n)) - unit(1, \ncm\n),\nunit(c(2, 2), \nmm\n))\ndraw(ht_list, padding = padding)\ndev.off()", 
            "title": "Treatment"
        }, 
        {
            "location": "/Treatment_metagenomics/#loading-the-data", 
            "text": "rm (list = ls())\nlibrary(phyloseq);library(ggplot2);library(gridExtra);library(RColorBrewer);library(colorspace)\nlibrary(lattice);library(plyr);library(KEGGREST);library(pracma);library(ggthemes);library(pheatmap)\nlibrary(ComplexHeatmap);library(BiocParallel);library(genefilter);library(DESeq2);library(tidyr)\nlibrary(viridis);library(ggstance);library(data.table);library(pracma);library(RbioRXN);library(ggplot2)\n\nsetwd( ~/Desktop/metagenomics/TBRU_treatment/ )\n\nregister(MulticoreParam(30))\nasinTransform  - function(p) { asin(sqrt(p)) }\n\nmainDir  -  ../metagenomics/ \nsubDir  -  metaphlan_profiling_treatment \ndir.create(file.path(mainDir, subDir), showWarnings = TRUE,  recursive = TRUE)\nresults_folder  - paste(mainDir,subDir,sep= )  mtph_subDir  -  metaphlan_profiling/ \ndir.create(file.path(mainDir, mtph_subDir), showWarnings = TRUE,  recursive = TRUE)\nmtph_results_folder  - paste(mainDir,mtph_subDir,sep= )\nmtph_dat  - read.csv( metaphlan2_taxonomic_table_joined.tsv ,sep= \\t )\nmtph  -mtph_dat\nrownames(mtph)  -mtph$X.SampleID\nmtph$X.SampleID -NULL\nmtph_otudata  -otu_table(mtph,taxa_are_rows = TRUE)\nmtph_taxmat  - matrix(sample(letters, nrow(mtph_otudata)/10, replace = TRUE), nrow = nrow(mtph_otudata), ncol = 7)\nrownames(mtph_taxmat)  - rownames(mtph_otudata)\ncolnames(mtph_taxmat)  - c( Domain ,  Phylum ,  Class ,  Order ,  Family ,  Genus ,  Species )\nmtph_taxmat  -tax_table(mtph_taxmat)\nmtph_phy  - phyloseq(mtph_otudata, mtph_taxmat)", 
            "title": "Loading the data"
        }, 
        {
            "location": "/Treatment_metagenomics/#import-the-metaphlan-data-to-phyloseq", 
            "text": "metadata.file  -  TBRU_Metadata_May2017.csv \nmetadata  - read.csv(metadata.file,na.strings=c( N/A , 99999 ))\nmetadata[is.na(metadata)] - 99999 \nmetadata$sample -gsub( - , . ,metadata$sample)\nsamp  - metadata % % data.frame()\nrownames(samp) -metadata$sample\nsnames -as.data.frame(do.call('rbind',strsplit(sample_names(mtph_phy), _ )))[,1]\nsample_names(mtph_phy) -snames\nsample_data(mtph_phy) -samp\n\n# subsettings\nmtph_phyIGRA_pos_active  - subset_samples(mtph_phy,!is.na(IGRA)   IGRA!= )\nmtph_phyIGRA_pos_active  - subset_samples(mtph_phyIGRA_pos_active,!is.na(Group6_TB_category)   Group6_TB_category!= cured )\nmtph_phyIGRA_pos_active  - subset_samples(mtph_phyIGRA_pos_active,!is.na(Group6_TB_category)   Group6_TB_category!= family_contact )\nmtph_phyIGRA_pos_active  - subset_samples(mtph_phyIGRA_pos_active,!is.na(Group6_TB_category)   Group6_TB_category!= family_LTBI )\n\n# keep only  38 years old in age\nmtph_phyIGRA_pos_active  - subset_samples(mtph_phyIGRA_pos_active,age =38)\n\nsplitted_names_tbru -strsplit(taxa_names(mtph_phyIGRA_pos_active), \\\\| )\nsplitted_names_tbru_length -lengths(splitted_names_tbru)\ntaxa_names(mtph_phyIGRA_pos_active)[splitted_names_tbru_length==7]\nmtph_phyIGRA_pos_active.speclevel -prune_taxa(taxa_names(mtph_phyIGRA_pos_active)[splitted_names_tbru_length==7],mtph_phyIGRA_pos_active)\ntaxa_names(mtph_phyIGRA_pos_active.speclevel) -do.call('rbind',strsplit(taxa_names(mtph_phyIGRA_pos_active.speclevel), \\\\| ))[,7]", 
            "title": "Import the metaphlan data to phyloseq"
        }, 
        {
            "location": "/Treatment_metagenomics/#principle-corrdinate-analysis", 
            "text": "pdf(paste(mtph_results_folder,'pca_plot_treatment.pdf',sep= / ),height = 7, width = 10)\nmtph_GP.ord  - ordinate(mtph_phyIGRA_pos_active.speclevel,  NMDS ,  bray )\nPalette_LTBI_treatment  - c( #377eb8 , #984ea3 )\nmtph.p.pca  - plot_ordination(mtph_phyIGRA_pos_active.speclevel, mtph_GP.ord, type= samples ,\ncolor= TB_status )\nmtph.p.pca  - mtph.p.pca + geom_point(size=4) +\ntheme_base() + scale_color_manual(values=c(Palette_LTBI_treatment))\nprint(mtph.p.pca)\ndev.off()   assignCols  - function(names,selection) {\nmymap -list()\navailableCols  -c( #000000 ,  #FFFF00 ,  #1CE6FF ,  #FF34FF ,  #FF4A46 ,  #008941 ,  #006FA6 ,  #A30059 , #FFDBE5 ,  #7A4900 ,  #0000A6 ,  #63FFAC ,  #B79762 ,  #004D43 ,  #8FB0FF ,  #997D87 , #5A0007 ,  #809693 ,  #FEFFE6 ,  #1B4400 ,  #4FC601 ,  #3B5DFF ,  #4A3B53 ,  #FF2F80 , #61615A ,  #BA0900 ,  #6B7900 ,  #00C2A0 ,  #FFAA92 ,  #FF90C9 ,  #B903AA ,  #D16100 , #DDEFFF ,  #000035 ,  #7B4F4B ,  #A1C299 ,  #300018 ,  #0AA6D8 ,  #013349 ,  #00846F , #372101 ,  #FFB500 ,  #C2FFED ,  #A079BF ,  #CC0744 ,  #C0B9B2 ,  #C2FF99 ,  #001E09 , #00489C ,  #6F0062 ,  #0CBD66 ,  #EEC3FF ,  #456D75 ,  #B77B68 ,  #7A87A1 ,  #788D66 , #885578 ,  #FAD09F ,  #FF8A9A ,  #D157A0 ,  #BEC459 ,  #456648 ,  #0086ED ,  #886F4C , #34362D ,  #B4A8BD ,  #00A6AA ,  #452C2C ,  #636375 ,  #A3C8C9 ,  #FF913F ,  #938A81 , #575329 ,  #00FECF ,  #B05B6F ,  #8CD0FF ,  #3B9700 ,  #04F757 ,  #C8A1A1 ,  #1E6E00 , #7900D7 ,  #A77500 ,  #6367A9 ,  #A05837 ,  #6B002C ,  #772600 ,  #D790FF ,  #9B9700 , #549E79 ,  #FFF69F ,  #201625 ,  #72418F ,  #BC23FF ,  #99ADC0 ,  #3A2465 ,  #922329 , #5B4534 ,  #FDE8DC ,  #404E55 ,  #0089A3 ,  #CB7E98 ,  #A4E804 ,  #324E72 ,  #6A3A4C , #83AB58 ,  #001C1E ,  #D1F7CE ,  #004B28 ,  #C8D0F6 ,  #A3A489 ,  #806C66 ,  #222800 , #BF5650 ,  #E83000 ,  #66796D ,  #DA007C ,  #FF1A59 ,  #8ADBB4 ,  #1E0200 ,  #5B4E51 , #C895C5 ,  #320033 ,  #FF6832 ,  #66E1D3 ,  #CFCDAC ,  #D0AC94 ,  #7ED379 ,  #012C58 )\nmymap[[1]] -rev(availableCols[match(intersect(names,selection),names)])\nmymap[[2]] -intersect(names,selection)\nmymap\n};\nmost_abundant_number  -40\ntopN =  most_abundant_number\nmost_abundant_taxa = sort(taxa_sums(mtph_phyIGRA_pos_active.speclevel), TRUE)[1:topN]\nGP = prune_taxa(names(most_abundant_taxa), mtph_phyIGRA_pos_active.speclevel)\nmGPr  - psmelt(GP)\nmycol  - assignCols(unique(mGPr$OTU),unique(mGPr$OTU))\npdf(paste(results_folder,'barplot_all.pdf',sep= / ),height = 6, width = 14)\np.bar -ggplot(data=mGPr,aes(Patient.ID, Abundance, fill=OTU))+\ngeom_bar(stat =  identity ) +\ntheme_base()+\ntheme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +\nscale_fill_manual(values = mycol[[1]],breaks=mycol[[2]]) +\nfacet_wrap(~TB_status, scales= free )+\nxlab( )\nprint(p.bar)\ndev.off()", 
            "title": "Principle corrdinate analysis"
        }, 
        {
            "location": "/Treatment_metagenomics/#run-lefse-on-treatment-vs-ltbi", 
            "text": "system( echo $PATH )\n\n# # #aquire sample data from phy\nphy.lefse -mtph_phyIGRA_pos_active.speclevel\nclass  -  TB_status \nsubclass -FALSE\nsubject - sample \nanova.alpha -0.05\nwilcoxon.alpha -0.05\nlda.cutoff -2.0\nwilcoxon.within.subclass  - TRUE\none.against.one  - T\nmult.test.correction  - 0\nmake.lefse.plots  - FALSE\nby_otus  - FALSE\n#\nsample.data  - sample_data(phy.lefse) % % data.frame(stringsAsFactors = FALSE)\nrownames(sample.data)  - sample.data$sample\n#\nkeepvars  - c( sample , TB_status )\nkeepvars  - unique(keepvars[!is.na(keepvars)])\nlefse.samp  - sample.data[, keepvars]\n#\nsample0  - t(lefse.samp) % % as.matrix()\ncolnames(sample0)  - sample0[1,]\nsample0  - as.data.frame(sample0)\n#\ndata0  - otu_table(phy.lefse) % % as.data.frame()\ndata1  - data0 % % as.data.table(keep.rownames=T)\nsample1  - sample0 % % as.data.table(keep.rownames=T)\ncommon  - intersect(colnames(data1), colnames(sample1))\npre.lefse  - rbind(sample1, data1,fill=T) % % t() % % na.omit() % % t()\n#\nwrite.table(pre.lefse,file = paste(results_folder, lefse.txt ,sep= ),sep =  \\t ,row.names = FALSE,col.names = FALSE,quote = FALSE)\n#\nopt.class  - paste( -c , which(keepvars %in% class))\nopt.subclass  - ifelse(is.na(subclass),  , paste( -s , which(keepvars %in%\nsubclass)))\nopt.subject  - ifelse(is.na(subject),  , paste( -u , which(keepvars %in%\nsubject)))\nformat.command  - paste(paste( format_input.py  ,results_folder, lefse.txt  ,results_folder, lefse.in ,sep= ),\nopt.class, opt.subject,  -o 1000000 )\nsystem(format.command)\n#\nlefse.command  - paste(paste( ~/miniconda2/bin/python ~/lefse/run_lefse.py  ,results_folder, lefse.in   ,results_folder,  lefse.res ,sep= ), -a , anova.alpha,  -w , wilcoxon.alpha,  -l , lda.cutoff, -e , as.numeric(wilcoxon.within.subclass),  -y , as.numeric(one.against.one), -s , mult.test.correction)\nlefse.command\nsystem(lefse.command)\n\nlefse.out  - read.table(paste(results_folder, lefse.res ,sep= ), header = FALSE, sep =  \\t )\nnames(lefse.out) -c( taxon , log.max.pct , direction , lda , p.value )\n(lefse.out -na.omit(lefse.out))\n\npdf(paste(results_folder,'lda_plot_LEFSE.pdf',sep= ),height = 7, width = 10)\nif(length(unique(lefse.out$direction)) 3){\nlefse.out$lda[lefse.out$direction==unique(lefse.out$direction)[1]]  -\n-1*lefse.out$lda[lefse.out$direction==unique(lefse.out$direction)[1]]\n}\nlefse.out$taxon -factor(lefse.out$taxon,levels=lefse.out$taxon[order(lefse.out$lda)])\ng1 -ggplot(data=lefse.out,aes(x=taxon,y=lda,color=direction,fill=direction))+\ngeom_bar(stat= identity )+\ncoord_flip()+\ntheme_base()\nif(length(unique(lefse.out$direction)) 3){\ng1 -g1+scale_color_manual(values=c(Palette_LTBI_treatment))+\nscale_fill_manual(values=c(Palette_LTBI_treatment))\n}\nprint(g1)\ndev.off()\nprint(g1)   ltk -as.character(lefse.out$taxon)\nphy_ra_ltk -prune_taxa(ltk,phy.lefse)\nphy_ra_ltk_m -psmelt(phy_ra_ltk)\n\nphy_ra_ltk_m$OTU -factor(phy_ra_ltk_m$OTU, levels=lefse.out$taxon[order(lefse.out$lda)])\n\ng2 -ggplot(phy_ra_ltk_m,aes(x=OTU,\ny=Abundance,color=TB_status,\nfill=TB_status))+\ngeom_boxplot(position=position_dodge(),\ncolour= black , # Use black outlines,\nsize=.3,alpha=0.5,outlier.shape = NA) +      # Thinner lines\ntheme_base()+\nxlab( )+\ncoord_flip()+\nscale_y_continuous(limits = c(0,5))\nif(length(unique(lefse.out$direction)) 3){\ng2 -g2+scale_color_manual(values=c(Palette_LTBI_treatment))+\nscale_fill_manual(values=c(Palette_LTBI_treatment))\n}\nprint(g2)\npdf(paste(results_folder,'significant_LEFSE.cured.pdf',sep= ),height = 6, width = 10)\nprint(g2)\ndev.off()", 
            "title": "Run LEfSe on Treatment vs LTBI"
        }, 
        {
            "location": "/Treatment_metagenomics/#make-a-heatmap-with-the-lefse-results", 
            "text": "phy_pos_cured_no_treat_ra_sset_sign -mtph_phy_ra_ltk\nsig_data_c -otu_table(phy_pos_cured_no_treat_ra_sset_sign)\ngenotype_colors -rep( darkred ,length(sample_data(phy_pos_cured_no_treat_ra_sset_sign)$TB_status))\ngenotype_colors[which(sample_data(phy_pos_cured_no_treat_ra_sset_sign)$TB_status== healthy )] - darkblue \ndist.pear -function(x) as.dist(1-cor(t(x)))\nmat -as.matrix(as.data.frame(sig_data_c))\nmat2 -scale(t(mat), scale = TRUE, center = TRUE)\nmat2 -t(mat2)\nmat2[mat2==0] -NA\nannotations -data.frame(sample_data(phy_pos_cured_no_treat_ra_sset_sign)[,c( TB_status )])\nnames(annotations) -c( TB_status )\ncolor_col = list(TB_status = c( treatment  =   #984ea3 , healthy  =  #377eb8 ))\nha_column = HeatmapAnnotation(annotations,col = color_col)\npdf(paste(results_folder,'in_house_heatmap_pathway_significant_abundance_complex_2.pdf',sep= ),height = 7, width = 10)\nht1  - Heatmap(mat2, name =  ht1 , column_title =  LTBI vs Cured , top_annotation = ha_column,\nclustering_distance_columns =  minkowski ,\nclustering_method_columns =  ward.D ,row_names_side =  left ,\nkm=1, color_space =  LAB ,col=magma(11), row_dend_side= right ,\nshow_column_names =  FALSE , width=4, row_names_max_width = unit(8,  cm ),\nrow_names_gp = gpar(fontsize = 9), cluster_columns = T,\nna_col= white ,heatmap_legend_param = list(at = c(0,5),color_bar =  continuous ))\nht_list = ht1\npadding = unit.c(unit(2,  mm ), grobWidth(textGrob( jnbkjsddjdjd_annotation_name )) - unit(1,  cm ),\nunit(c(2, 2),  mm ))\ndraw(ht_list, padding = padding)\ndev.off()", 
            "title": "Make a heatmap with the LEfSe results"
        }, 
        {
            "location": "/Cured_metagenomics/", 
            "text": "Loading the data\n\n\nrm (list = ls())\nlibrary(\nphyloseq\n);library(\nggplot2\n);library(\ngridExtra\n);library(\nRColorBrewer\n);library(\ncolorspace\n);\nlibrary(\nlattice\n);library(\nplyr\n);library(\npracma\n);library(\nggthemes\n);library(\npheatmap\n);library(\nComplexHeatmap\n);\nlibrary(\nBiocParallel\n);library(\ngenefilter\n);library(\nDESeq2\n);library(\ntidyr\n);library(\nviridis\n);library(data.table);\nlibrary(\nKEGGREST\n)\n\nsetwd(\n~/Desktop/metagenomics/Jan04_17_results\n)\n\nregister(MulticoreParam(30))\nasinTransform \n- function(p) { asin(sqrt(p)) }\n\nmainDir \n- \n../metagenomics/\n\nsubDir \n- \nmetaphlan_profiling_cured\n\ndir.create(file.path(mainDir, subDir), showWarnings = TRUE,  recursive = TRUE)\nresults_folder \n- paste(mainDir,subDir,sep=\n)\n\n\n\n\nmtph_subDir \n- \nmetaphlan_profiling/\n\ndir.create(file.path(mainDir, mtph_subDir), showWarnings = TRUE,  recursive = TRUE)\nmtph_results_folder \n- paste(mainDir,mtph_subDir,sep=\n)\nmtph_dat \n- read.csv(\n../tbru_ss_data/metaphlan2_taxonomic_table_joined.tsv\n,sep=\n\\t\n)\nmtph \n-mtph_dat\nrownames(mtph) \n-mtph$X.SampleID\nmtph$X.SampleID\n-NULL\nmtph_otudata \n-otu_table(mtph,taxa_are_rows = TRUE)\nmtph_taxmat \n- matrix(sample(letters, nrow(mtph_otudata)/10, replace = TRUE), nrow = nrow(mtph_otudata), ncol = 7)\nrownames(mtph_taxmat) \n- rownames(mtph_otudata)\ncolnames(mtph_taxmat) \n- c(\nDomain\n, \nPhylum\n, \nClass\n, \nOrder\n, \nFamily\n, \nGenus\n, \nSpecies\n)\nmtph_taxmat \n-tax_table(mtph_taxmat)\nmtph_phy \n- phyloseq(mtph_otudata, mtph_taxmat)\n\n## Import the metaphlan data to phyloseq\n```{r}\nmetadata.file \n- \n../tbru_ss_data/TBRU_Metadata_May2017.csv\n\nmetadata \n- read.csv(metadata.file,na.strings=c(\nN/A\n,\n99999\n)) \nmetadata[is.na(metadata)]\n-\n99999\n\nmetadata$sample\n-gsub(\n-\n,\n.\n,metadata$sample)\nsamp \n- metadata %\n% data.frame() \n\nrownames(samp)\n-metadata$sample\nsnames\n-as.data.frame(do.call('rbind',strsplit(sample_names(mtph_phy),\n_\n)))[,1]\nsample_names(mtph_phy)\n-snames\nsample_data(mtph_phy)\n-samp\n\n# subsettings\nmtph_phy_pos_cured_no_treat\n-subset_samples(mtph_phy,!is.na(TB_status) \n TB_status!=\ntreatment\n)\nmtph_phy_pos_cured_no_treat \n- subset_samples(mtph_phy_pos_cured_no_treat,!is.na(Group6_TB_category) \n Group6_TB_category!=\nfamily_member\n)\n\n# keep only \n38 years old in age\nmtph_phy_pos_cured_no_treat \n- subset_samples(mtph_phy_pos_cured_no_treat,age\n=38)\nsample_data(mtph_phy_pos_cured_no_treat)$TB_status \n- relevel(sample_data(mtph_phy_pos_cured_no_treat)$TB_status,\nhealthy\n)\n\nsplitted_names_tbru\n-strsplit(taxa_names(mtph_phy_pos_cured_no_treat),\n\\\\|\n)\nsplitted_names_tbru_length\n-lengths(splitted_names_tbru)\ntaxa_names(mtph_phy_pos_cured_no_treat)[splitted_names_tbru_length==7]\nmtph_phy_pos_cured_no_treat.speclevel\n-prune_taxa(taxa_names(mtph_phy_pos_cured_no_treat)[splitted_names_tbru_length==7],\n                                                  mtph_phy_pos_cured_no_treat)\ntaxa_names(mtph_phy_pos_cured_no_treat.speclevel)\n-do.call('rbind',strsplit(taxa_names(mtph_phy_pos_cured_no_treat.speclevel),\n\\\\|\n))[,7]\n\n\n\n\nPrinciple corrdinate analysis\n\n\npdf(paste(mtph_results_folder,'pca_plot_cured_NMDS.pdf',sep=\n),height = 7, width = 10)\nmtph_GP.ord \n- ordinate(mtph_phy_pos_cured_no_treat, \nNMDS\n, \nbray\n)\nmtph.p.pca \n- plot_ordination(mtph_phy_pos_cured_no_treat, mtph_GP.ord, type=\nsamples\n, \n                              color=\nTB_status\n) \nPalette_LTBI_cured \n- c(\n#377eb8\n,\n#e7298a\n)\nmtph.p.pca \n- mtph.p.pca + geom_point(size=4)+\n  theme_base()+\n  scale_color_manual(values=c(Palette_LTBI_cured))\nprint(mtph.p.pca)\ndev.off()\n\n\n\n\n\n\nassignCols \n- function(names,selection) {\n  mymap\n-list()\n  availableCols \n-c(\n#000000\n, \n#FFFF00\n, \n#1CE6FF\n, \n#FF34FF\n, \n#FF4A46\n, \n#008941\n, \n#006FA6\n, \n#A30059\n,\n                    \n#FFDBE5\n, \n#7A4900\n, \n#0000A6\n, \n#63FFAC\n, \n#B79762\n, \n#004D43\n, \n#8FB0FF\n, \n#997D87\n,\n                    \n#5A0007\n, \n#809693\n, \n#FEFFE6\n, \n#1B4400\n, \n#4FC601\n, \n#3B5DFF\n, \n#4A3B53\n, \n#FF2F80\n,\n                    \n#61615A\n, \n#BA0900\n, \n#6B7900\n, \n#00C2A0\n, \n#FFAA92\n, \n#FF90C9\n, \n#B903AA\n, \n#D16100\n,\n                    \n#DDEFFF\n, \n#000035\n, \n#7B4F4B\n, \n#A1C299\n, \n#300018\n, \n#0AA6D8\n, \n#013349\n, \n#00846F\n,\n                    \n#372101\n, \n#FFB500\n, \n#C2FFED\n, \n#A079BF\n, \n#CC0744\n, \n#C0B9B2\n, \n#C2FF99\n, \n#001E09\n,\n                    \n#00489C\n, \n#6F0062\n, \n#0CBD66\n, \n#EEC3FF\n, \n#456D75\n, \n#B77B68\n, \n#7A87A1\n, \n#788D66\n,\n                    \n#885578\n, \n#FAD09F\n, \n#FF8A9A\n, \n#D157A0\n, \n#BEC459\n, \n#456648\n, \n#0086ED\n, \n#886F4C\n,\n                    \n#34362D\n, \n#B4A8BD\n, \n#00A6AA\n, \n#452C2C\n, \n#636375\n, \n#A3C8C9\n, \n#FF913F\n, \n#938A81\n,\n                    \n#575329\n, \n#00FECF\n, \n#B05B6F\n, \n#8CD0FF\n, \n#3B9700\n, \n#04F757\n, \n#C8A1A1\n, \n#1E6E00\n,\n                    \n#7900D7\n, \n#A77500\n, \n#6367A9\n, \n#A05837\n, \n#6B002C\n, \n#772600\n, \n#D790FF\n, \n#9B9700\n,\n                    \n#549E79\n, \n#FFF69F\n, \n#201625\n, \n#72418F\n, \n#BC23FF\n, \n#99ADC0\n, \n#3A2465\n, \n#922329\n,\n                    \n#5B4534\n, \n#FDE8DC\n, \n#404E55\n, \n#0089A3\n, \n#CB7E98\n, \n#A4E804\n, \n#324E72\n, \n#6A3A4C\n,\n                    \n#83AB58\n, \n#001C1E\n, \n#D1F7CE\n, \n#004B28\n, \n#C8D0F6\n, \n#A3A489\n, \n#806C66\n, \n#222800\n,\n                    \n#BF5650\n, \n#E83000\n, \n#66796D\n, \n#DA007C\n, \n#FF1A59\n, \n#8ADBB4\n, \n#1E0200\n, \n#5B4E51\n,\n                    \n#C895C5\n, \n#320033\n, \n#FF6832\n, \n#66E1D3\n, \n#CFCDAC\n, \n#D0AC94\n, \n#7ED379\n, \n#012C58\n)\n  mymap[[1]]\n-rev(availableCols[match(intersect(names,selection),names)])\n  mymap[[2]]\n-intersect(names,selection)\n  mymap\n};\nmost_abundant_number \n-40\ntopN =  most_abundant_number\nmost_abundant_taxa = sort(taxa_sums(mtph_phy_pos_cured_no_treat.speclevel), TRUE)[1:topN]\nGP = prune_taxa(names(most_abundant_taxa), mtph_phy_pos_cured_no_treat.speclevel)\nmGPr \n- psmelt(GP)\nmycol \n- assignCols(unique(mGPr$OTU),unique(mGPr$OTU))\npdf(paste(results_folder,'barplot_all.pdf',sep=\n),height = 7, width = 10)\np.bar\n-ggplot(data=mGPr,aes(Patient.ID, Abundance, fill=OTU))+\n  geom_bar(stat = \nidentity\n) +\n  theme_base()+\n  theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +\n  scale_fill_manual(values = mycol[[1]],breaks=mycol[[2]]) +\n  facet_wrap(~TB_status,scales=\nfree\n)+\n  xlab(\n)\nprint(p.bar)\ndev.off()\n\n\n\n\n\n\nRun LEfSe on Cured vs LTBI\n\n\nsystem(\necho $PATH\n)\n\n# # #aquire sample data from phy\nphy.lefse\n-mtph_phy_pos_cured_no_treat.speclevel\nclass \n- \nTB_status\n\nsubclass\n-FALSE\nsubject\n-\nsample\n\nanova.alpha\n-0.05\nwilcoxon.alpha\n-0.05\nlda.cutoff\n-2.0\nwilcoxon.within.subclass \n- TRUE\none.against.one \n- FALSE \nmult.test.correction \n- 0 \nmake.lefse.plots \n- FALSE\nby_otus \n- FALSE\n# \nsample.data \n- phyloseq::sample_data(phy.lefse) %\n% data.frame(stringsAsFactors = FALSE)\nsample.data$sample \n- rownames(sample.data)\n# \nkeepvars \n- c(\nsample\n,\nTB_status\n)\nkeepvars \n- unique(keepvars[!is.na(keepvars)])\nlefse.samp \n- sample.data[, keepvars]\n# \nsample0 \n- t(lefse.samp) %\n% as.matrix()\ncolnames(sample0) \n- sample0[1,]\nsample0 \n- as.data.frame(sample0)\n# \ndata0 \n- otu_table(phy.lefse) %\n% as.data.frame()\ndata1 \n- data0 %\n% as.data.table(keep.rownames=T)\nsample1 \n- sample0 %\n% as.data.table(keep.rownames=T)\ncommon \n- intersect(colnames(data1), colnames(sample1))\npre.lefse \n- rbind(sample1, data1,fill=T) %\n% t() %\n% na.omit() %\n% t()\n# \nwrite.table(pre.lefse,file =paste(results_folder,\nlefse.txt\n,sep=\n),sep = \n\\t\n,row.names = FALSE,col.names = FALSE,quote = FALSE)\n# \nopt.class \n- paste(\n-c\n, which(keepvars %in% class))\nopt.subclass \n- ifelse(is.na(subclass), \n, paste(\n-s\n, which(keepvars %in% \n                                                                subclass)))\nopt.subject \n- ifelse(is.na(subject), \n, paste(\n-u\n, which(keepvars %in% \n                                                              subject)))\nformat.command \n- paste(paste(\n~/miniconda2/bin/python ~/lefse/format_input.py \n,results_folder,\nlefse.txt \n,results_folder,\nlefse.in\n,sep=\n), \n                        opt.class, opt.subject, \n-o 1000000\n)\nsystem(format.command)\n# \nlefse.command \n- paste(paste(\nrun_lefse.py \n,results_folder,\nlefse.in \n ,results_folder, \nlefse.res\n,sep=\n), \n                       \n-a\n, anova.alpha, \n-w\n, wilcoxon.alpha, \n-l\n, lda.cutoff, \n                       \n-e\n, as.numeric(wilcoxon.within.subclass), \n-y\n, as.numeric(one.against.one), \n                       \n-s\n, mult.test.correction)\nlefse.command\nsystem(lefse.command)\n\n\nlefse.out \n- read.table(paste(results_folder,\nlefse.res\n,sep=\n), header = FALSE, sep = \n\\t\n)\nnames(lefse.out)\n-c(\ntaxon\n,\nlog.max.pct\n,\ndirection\n,\nlda\n,\np.value\n)\n(lefse.out\n-na.omit(lefse.out))\n\nif (make.lefse.plots) {\n  system(\nplot_res.py lefse.res lefse_lda.png\n)\n  print(\nWrote lefse_lda.png\n)\n  system(\nplot_cladogram.py lefse.res lefse_clado.pdf --format pdf\n)\n  print(\nWrote lefse_clado.pdf\n)\n}\n# \npdf(paste(results_folder,'lda_plot_LEFSE.pdf',sep=\n),height = 4, width = 10)\nPalette_LTBI_cured \n- c(\n#e7298a\n,\n#377eb8\n)\nif(length(unique(lefse.out$direction))\n3){\n  lefse.out$lda[lefse.out$direction==unique(lefse.out$direction)[1]] \n- \n    -1*lefse.out$lda[lefse.out$direction==unique(lefse.out$direction)[1]]\n}\nlefse.out$taxon\n-factor(lefse.out$taxon,levels=lefse.out$taxon[order(lefse.out$lda)])\ng1\n-ggplot(data=lefse.out,aes(x=taxon,y=lda,color=direction,fill=direction))+\n  geom_bar(stat=\nidentity\n)+\n  coord_flip()+\n  theme_base()+\n  xlab(\nLDA Score\n)+\n  ylab(\n)\nif(length(unique(lefse.out$direction))\n3){\n  g1\n-g1+scale_color_manual(values=c(Palette_LTBI_cured))+\n    scale_fill_manual(values=c(Palette_LTBI_cured))\n}\nprint(g1)\ndev.off()\n\n\n\n\n\n\nltk\n-as.character(lefse.out$taxon)\nphy_ra_ltk\n-prune_taxa(ltk,phy.lefse)\nphy_ra_ltk_m\n-psmelt(phy_ra_ltk)\n\nphy_ra_ltk_m$OTU\n-factor(phy_ra_ltk_m$OTU, levels=lefse.out$taxon[order(lefse.out$lda)])\n\nPalette_LTBI_cured \n- c(\n#377eb8\n,\n#e7298a\n)\ng2\n-ggplot(phy_ra_ltk_m,aes(x=OTU,\n                            y=Abundance,color=TB_status,\n                            fill=TB_status))+\n  geom_boxplot(position=position_dodge(),\n               colour=\nblack\n, # Use black outlines,\n               size=.3,alpha=0.5) +      # Thinner lines\n  theme_base()+\n  xlab(\n)+\n  coord_flip()\n\nif(length(unique(lefse.out$direction))\n3){\n  g2\n-g2+scale_color_manual(values=c(Palette_LTBI_cured))+\n    scale_fill_manual(values=c(Palette_LTBI_cured))\n}\npdf(paste(results_folder,'significant_LEFSE.pdf',sep=\n),height = 6, width = 10)\nprint(g2)\ndev.off()", 
            "title": "Cured"
        }, 
        {
            "location": "/Cured_metagenomics/#loading-the-data", 
            "text": "rm (list = ls())\nlibrary( phyloseq );library( ggplot2 );library( gridExtra );library( RColorBrewer );library( colorspace );\nlibrary( lattice );library( plyr );library( pracma );library( ggthemes );library( pheatmap );library( ComplexHeatmap );\nlibrary( BiocParallel );library( genefilter );library( DESeq2 );library( tidyr );library( viridis );library(data.table);\nlibrary( KEGGREST )\n\nsetwd( ~/Desktop/metagenomics/Jan04_17_results )\n\nregister(MulticoreParam(30))\nasinTransform  - function(p) { asin(sqrt(p)) }\n\nmainDir  -  ../metagenomics/ \nsubDir  -  metaphlan_profiling_cured \ndir.create(file.path(mainDir, subDir), showWarnings = TRUE,  recursive = TRUE)\nresults_folder  - paste(mainDir,subDir,sep= )  mtph_subDir  -  metaphlan_profiling/ \ndir.create(file.path(mainDir, mtph_subDir), showWarnings = TRUE,  recursive = TRUE)\nmtph_results_folder  - paste(mainDir,mtph_subDir,sep= )\nmtph_dat  - read.csv( ../tbru_ss_data/metaphlan2_taxonomic_table_joined.tsv ,sep= \\t )\nmtph  -mtph_dat\nrownames(mtph)  -mtph$X.SampleID\nmtph$X.SampleID -NULL\nmtph_otudata  -otu_table(mtph,taxa_are_rows = TRUE)\nmtph_taxmat  - matrix(sample(letters, nrow(mtph_otudata)/10, replace = TRUE), nrow = nrow(mtph_otudata), ncol = 7)\nrownames(mtph_taxmat)  - rownames(mtph_otudata)\ncolnames(mtph_taxmat)  - c( Domain ,  Phylum ,  Class ,  Order ,  Family ,  Genus ,  Species )\nmtph_taxmat  -tax_table(mtph_taxmat)\nmtph_phy  - phyloseq(mtph_otudata, mtph_taxmat)\n\n## Import the metaphlan data to phyloseq\n```{r}\nmetadata.file  -  ../tbru_ss_data/TBRU_Metadata_May2017.csv \nmetadata  - read.csv(metadata.file,na.strings=c( N/A , 99999 )) \nmetadata[is.na(metadata)] - 99999 \nmetadata$sample -gsub( - , . ,metadata$sample)\nsamp  - metadata % % data.frame() \n\nrownames(samp) -metadata$sample\nsnames -as.data.frame(do.call('rbind',strsplit(sample_names(mtph_phy), _ )))[,1]\nsample_names(mtph_phy) -snames\nsample_data(mtph_phy) -samp\n\n# subsettings\nmtph_phy_pos_cured_no_treat -subset_samples(mtph_phy,!is.na(TB_status)   TB_status!= treatment )\nmtph_phy_pos_cured_no_treat  - subset_samples(mtph_phy_pos_cured_no_treat,!is.na(Group6_TB_category)   Group6_TB_category!= family_member )\n\n# keep only  38 years old in age\nmtph_phy_pos_cured_no_treat  - subset_samples(mtph_phy_pos_cured_no_treat,age =38)\nsample_data(mtph_phy_pos_cured_no_treat)$TB_status  - relevel(sample_data(mtph_phy_pos_cured_no_treat)$TB_status, healthy )\n\nsplitted_names_tbru -strsplit(taxa_names(mtph_phy_pos_cured_no_treat), \\\\| )\nsplitted_names_tbru_length -lengths(splitted_names_tbru)\ntaxa_names(mtph_phy_pos_cured_no_treat)[splitted_names_tbru_length==7]\nmtph_phy_pos_cured_no_treat.speclevel -prune_taxa(taxa_names(mtph_phy_pos_cured_no_treat)[splitted_names_tbru_length==7],\n                                                  mtph_phy_pos_cured_no_treat)\ntaxa_names(mtph_phy_pos_cured_no_treat.speclevel) -do.call('rbind',strsplit(taxa_names(mtph_phy_pos_cured_no_treat.speclevel), \\\\| ))[,7]", 
            "title": "Loading the data"
        }, 
        {
            "location": "/Cured_metagenomics/#principle-corrdinate-analysis", 
            "text": "pdf(paste(mtph_results_folder,'pca_plot_cured_NMDS.pdf',sep= ),height = 7, width = 10)\nmtph_GP.ord  - ordinate(mtph_phy_pos_cured_no_treat,  NMDS ,  bray )\nmtph.p.pca  - plot_ordination(mtph_phy_pos_cured_no_treat, mtph_GP.ord, type= samples , \n                              color= TB_status ) \nPalette_LTBI_cured  - c( #377eb8 , #e7298a )\nmtph.p.pca  - mtph.p.pca + geom_point(size=4)+\n  theme_base()+\n  scale_color_manual(values=c(Palette_LTBI_cured))\nprint(mtph.p.pca)\ndev.off()   assignCols  - function(names,selection) {\n  mymap -list()\n  availableCols  -c( #000000 ,  #FFFF00 ,  #1CE6FF ,  #FF34FF ,  #FF4A46 ,  #008941 ,  #006FA6 ,  #A30059 ,\n                     #FFDBE5 ,  #7A4900 ,  #0000A6 ,  #63FFAC ,  #B79762 ,  #004D43 ,  #8FB0FF ,  #997D87 ,\n                     #5A0007 ,  #809693 ,  #FEFFE6 ,  #1B4400 ,  #4FC601 ,  #3B5DFF ,  #4A3B53 ,  #FF2F80 ,\n                     #61615A ,  #BA0900 ,  #6B7900 ,  #00C2A0 ,  #FFAA92 ,  #FF90C9 ,  #B903AA ,  #D16100 ,\n                     #DDEFFF ,  #000035 ,  #7B4F4B ,  #A1C299 ,  #300018 ,  #0AA6D8 ,  #013349 ,  #00846F ,\n                     #372101 ,  #FFB500 ,  #C2FFED ,  #A079BF ,  #CC0744 ,  #C0B9B2 ,  #C2FF99 ,  #001E09 ,\n                     #00489C ,  #6F0062 ,  #0CBD66 ,  #EEC3FF ,  #456D75 ,  #B77B68 ,  #7A87A1 ,  #788D66 ,\n                     #885578 ,  #FAD09F ,  #FF8A9A ,  #D157A0 ,  #BEC459 ,  #456648 ,  #0086ED ,  #886F4C ,\n                     #34362D ,  #B4A8BD ,  #00A6AA ,  #452C2C ,  #636375 ,  #A3C8C9 ,  #FF913F ,  #938A81 ,\n                     #575329 ,  #00FECF ,  #B05B6F ,  #8CD0FF ,  #3B9700 ,  #04F757 ,  #C8A1A1 ,  #1E6E00 ,\n                     #7900D7 ,  #A77500 ,  #6367A9 ,  #A05837 ,  #6B002C ,  #772600 ,  #D790FF ,  #9B9700 ,\n                     #549E79 ,  #FFF69F ,  #201625 ,  #72418F ,  #BC23FF ,  #99ADC0 ,  #3A2465 ,  #922329 ,\n                     #5B4534 ,  #FDE8DC ,  #404E55 ,  #0089A3 ,  #CB7E98 ,  #A4E804 ,  #324E72 ,  #6A3A4C ,\n                     #83AB58 ,  #001C1E ,  #D1F7CE ,  #004B28 ,  #C8D0F6 ,  #A3A489 ,  #806C66 ,  #222800 ,\n                     #BF5650 ,  #E83000 ,  #66796D ,  #DA007C ,  #FF1A59 ,  #8ADBB4 ,  #1E0200 ,  #5B4E51 ,\n                     #C895C5 ,  #320033 ,  #FF6832 ,  #66E1D3 ,  #CFCDAC ,  #D0AC94 ,  #7ED379 ,  #012C58 )\n  mymap[[1]] -rev(availableCols[match(intersect(names,selection),names)])\n  mymap[[2]] -intersect(names,selection)\n  mymap\n};\nmost_abundant_number  -40\ntopN =  most_abundant_number\nmost_abundant_taxa = sort(taxa_sums(mtph_phy_pos_cured_no_treat.speclevel), TRUE)[1:topN]\nGP = prune_taxa(names(most_abundant_taxa), mtph_phy_pos_cured_no_treat.speclevel)\nmGPr  - psmelt(GP)\nmycol  - assignCols(unique(mGPr$OTU),unique(mGPr$OTU))\npdf(paste(results_folder,'barplot_all.pdf',sep= ),height = 7, width = 10)\np.bar -ggplot(data=mGPr,aes(Patient.ID, Abundance, fill=OTU))+\n  geom_bar(stat =  identity ) +\n  theme_base()+\n  theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +\n  scale_fill_manual(values = mycol[[1]],breaks=mycol[[2]]) +\n  facet_wrap(~TB_status,scales= free )+\n  xlab( )\nprint(p.bar)\ndev.off()", 
            "title": "Principle corrdinate analysis"
        }, 
        {
            "location": "/Cured_metagenomics/#run-lefse-on-cured-vs-ltbi", 
            "text": "system( echo $PATH )\n\n# # #aquire sample data from phy\nphy.lefse -mtph_phy_pos_cured_no_treat.speclevel\nclass  -  TB_status \nsubclass -FALSE\nsubject - sample \nanova.alpha -0.05\nwilcoxon.alpha -0.05\nlda.cutoff -2.0\nwilcoxon.within.subclass  - TRUE\none.against.one  - FALSE \nmult.test.correction  - 0 \nmake.lefse.plots  - FALSE\nby_otus  - FALSE\n# \nsample.data  - phyloseq::sample_data(phy.lefse) % % data.frame(stringsAsFactors = FALSE)\nsample.data$sample  - rownames(sample.data)\n# \nkeepvars  - c( sample , TB_status )\nkeepvars  - unique(keepvars[!is.na(keepvars)])\nlefse.samp  - sample.data[, keepvars]\n# \nsample0  - t(lefse.samp) % % as.matrix()\ncolnames(sample0)  - sample0[1,]\nsample0  - as.data.frame(sample0)\n# \ndata0  - otu_table(phy.lefse) % % as.data.frame()\ndata1  - data0 % % as.data.table(keep.rownames=T)\nsample1  - sample0 % % as.data.table(keep.rownames=T)\ncommon  - intersect(colnames(data1), colnames(sample1))\npre.lefse  - rbind(sample1, data1,fill=T) % % t() % % na.omit() % % t()\n# \nwrite.table(pre.lefse,file =paste(results_folder, lefse.txt ,sep= ),sep =  \\t ,row.names = FALSE,col.names = FALSE,quote = FALSE)\n# \nopt.class  - paste( -c , which(keepvars %in% class))\nopt.subclass  - ifelse(is.na(subclass),  , paste( -s , which(keepvars %in% \n                                                                subclass)))\nopt.subject  - ifelse(is.na(subject),  , paste( -u , which(keepvars %in% \n                                                              subject)))\nformat.command  - paste(paste( ~/miniconda2/bin/python ~/lefse/format_input.py  ,results_folder, lefse.txt  ,results_folder, lefse.in ,sep= ), \n                        opt.class, opt.subject,  -o 1000000 )\nsystem(format.command)\n# \nlefse.command  - paste(paste( run_lefse.py  ,results_folder, lefse.in   ,results_folder,  lefse.res ,sep= ), \n                        -a , anova.alpha,  -w , wilcoxon.alpha,  -l , lda.cutoff, \n                        -e , as.numeric(wilcoxon.within.subclass),  -y , as.numeric(one.against.one), \n                        -s , mult.test.correction)\nlefse.command\nsystem(lefse.command)\n\n\nlefse.out  - read.table(paste(results_folder, lefse.res ,sep= ), header = FALSE, sep =  \\t )\nnames(lefse.out) -c( taxon , log.max.pct , direction , lda , p.value )\n(lefse.out -na.omit(lefse.out))\n\nif (make.lefse.plots) {\n  system( plot_res.py lefse.res lefse_lda.png )\n  print( Wrote lefse_lda.png )\n  system( plot_cladogram.py lefse.res lefse_clado.pdf --format pdf )\n  print( Wrote lefse_clado.pdf )\n}\n# \npdf(paste(results_folder,'lda_plot_LEFSE.pdf',sep= ),height = 4, width = 10)\nPalette_LTBI_cured  - c( #e7298a , #377eb8 )\nif(length(unique(lefse.out$direction)) 3){\n  lefse.out$lda[lefse.out$direction==unique(lefse.out$direction)[1]]  - \n    -1*lefse.out$lda[lefse.out$direction==unique(lefse.out$direction)[1]]\n}\nlefse.out$taxon -factor(lefse.out$taxon,levels=lefse.out$taxon[order(lefse.out$lda)])\ng1 -ggplot(data=lefse.out,aes(x=taxon,y=lda,color=direction,fill=direction))+\n  geom_bar(stat= identity )+\n  coord_flip()+\n  theme_base()+\n  xlab( LDA Score )+\n  ylab( )\nif(length(unique(lefse.out$direction)) 3){\n  g1 -g1+scale_color_manual(values=c(Palette_LTBI_cured))+\n    scale_fill_manual(values=c(Palette_LTBI_cured))\n}\nprint(g1)\ndev.off()   ltk -as.character(lefse.out$taxon)\nphy_ra_ltk -prune_taxa(ltk,phy.lefse)\nphy_ra_ltk_m -psmelt(phy_ra_ltk)\n\nphy_ra_ltk_m$OTU -factor(phy_ra_ltk_m$OTU, levels=lefse.out$taxon[order(lefse.out$lda)])\n\nPalette_LTBI_cured  - c( #377eb8 , #e7298a )\ng2 -ggplot(phy_ra_ltk_m,aes(x=OTU,\n                            y=Abundance,color=TB_status,\n                            fill=TB_status))+\n  geom_boxplot(position=position_dodge(),\n               colour= black , # Use black outlines,\n               size=.3,alpha=0.5) +      # Thinner lines\n  theme_base()+\n  xlab( )+\n  coord_flip()\n\nif(length(unique(lefse.out$direction)) 3){\n  g2 -g2+scale_color_manual(values=c(Palette_LTBI_cured))+\n    scale_fill_manual(values=c(Palette_LTBI_cured))\n}\npdf(paste(results_folder,'significant_LEFSE.pdf',sep= ),height = 6, width = 10)\nprint(g2)\ndev.off()", 
            "title": "Run LEfSe on Cured vs LTBI"
        }, 
        {
            "location": "/about/", 
            "text": "Tuberculosis (TB) is a disease\n\n\nMycobacterium tuberculosis causes TB disease\n\n\nThere are 1,000,000,000,000+ microbiota on and in your body", 
            "title": "About"
        }, 
        {
            "location": "/about/#tuberculosis-tb-is-a-disease", 
            "text": "", 
            "title": "Tuberculosis (TB) is a disease"
        }, 
        {
            "location": "/about/#mycobacterium-tuberculosis-causes-tb-disease", 
            "text": "", 
            "title": "Mycobacterium tuberculosis causes TB disease"
        }, 
        {
            "location": "/about/#there-are-1000000000000-microbiota-on-and-in-your-body", 
            "text": "", 
            "title": "There are 1,000,000,000,000+ microbiota on and in your body"
        }
    ]
}